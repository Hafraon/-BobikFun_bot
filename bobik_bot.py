import os
import requests
import asyncio
import random
import schedule
import time
from datetime import datetime, timedelta
from telegram import Bot
from telegram.ext import Application, CommandHandler, ContextTypes
import logging
from typing import List, Dict, Optional
import json

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BobikMemeBot:
    def __init__(self):
        self.bot_token = "7882259321:AAGGqql6LD6bzLHTOb1HdKUYs2IJBZqsd6E"
        self.channel_id = "@BobikFun"  # –ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –º–µ–º—ñ–≤
        self.bot = Bot(token=self.bot_token)
        
        # –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ API –¥–ª—è –º–µ–º—ñ–≤
        self.meme_sources = {
            'reddit_memes': 'https://meme-api.herokuapp.com/gimme',
            'programming': 'https://meme-api.herokuapp.com/gimme/ProgrammerHumor',
            'wholesome': 'https://meme-api.herokuapp.com/gimme/wholesomememes',
            'dankmemes': 'https://meme-api.herokuapp.com/gimme/dankmemes',
            'ukraininan_context': 'https://meme-api.herokuapp.com/gimme/me_irl'
        }
        
        # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Ñ—Ä–∞–∑–∏ –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
        self.ukrainian_captions = [
            "üêï –ë–æ–±—ñ–∫ –∑–Ω–∞–π—à–æ–≤ —â–æ—Å—å —Å–º—ñ—à–Ω–µ!",
            "üòÇ –¶–µ —Ç—Ä–µ–±–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ–º!", 
            "üî• –°–≤—ñ–∂–∏–π –≥—É–º–æ—Ä –≤—ñ–¥ –ë–æ–±—ñ–∫–∞!",
            "üòÑ –•–æ—Ä–æ—à–∏–π –Ω–∞—Å—Ç—Ä—ñ–π –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∏–π!",
            "üéØ –ë–æ–±—ñ–∫ –Ω–µ –ø—Ä–æ–º–∞—Ö–Ω—É–≤—Å—è!",
            "üíé –ó–æ–ª–æ—Ç–∏–π –º–µ–º –¥–Ω—è!",
            "‚ö° –ë–æ–±—ñ–∫ –Ω–∞ –∑–≤'—è–∑–∫—É!",
            "üöÄ –ó–∞—Ä—è–¥ –ø–æ–∑–∏—Ç–∏–≤—É!",
            "üé™ –ß–∞—Å —Å–º—ñ—è—Ç–∏—Å—è!",
            "üåü –Ø–∫—ñ—Å—Ç—å –≤—ñ–¥ –ë–æ–±—ñ–∫–∞!"
        ]
        
        # –†–æ–∑–∫–ª–∞–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π (UTC)
        self.posting_schedule = [
            "06:00",  # –†–∞–Ω–∫–æ–≤–∞ –ø–æ—Ä—Ü—ñ—è
            "09:00",  # –†–æ–±–æ—á–∏–π –¥–µ–Ω—å
            "12:00",  # –û–±—ñ–¥  
            "15:00",  # –ü—ñ—Å–ª—è –æ–±—ñ–¥—É
            "18:00",  # –ö—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è
            "21:00",  # –í–µ—á—ñ—Ä–Ω—ñ–π —Ä–µ–ª–∞–∫—Å
            "23:30"   # –î–ª—è –Ω—ñ—á–Ω–∏—Ö —Å–æ–≤
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'posts_today': 0,
            'total_posts': 0,
            'last_post_time': None
        }

    async def get_meme_from_source(self, source_name: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º—É—î –º–µ–º –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞"""
        try:
            url = self.meme_sources.get(source_name)
            if not url:
                return None
                
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                
                # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —è–∫—ñ—Å–Ω—ñ –º–µ–º–∏
                if self.is_quality_meme(data):
                    return data
                    
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–º—É –∑ {source_name}: {e}")
            
        return None

    def is_quality_meme(self, meme_data: Dict) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —è–∫—ñ—Å—Ç—å –º–µ–º—É"""
        try:
            ups = meme_data.get('ups', 0)
            title = meme_data.get('title', '').lower()
            
            # –§—ñ–ª—å—Ç—Ä —è–∫–æ—Å—Ç—ñ
            if ups < 100:  # –ú—ñ–Ω—ñ–º—É–º 100 upvotes
                return False
                
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –Ω–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            bad_words = ['nsfw', 'politics', 'religion', 'controversial']
            if any(word in title for word in bad_words):
                return False
                
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            url = meme_data.get('url', '')
            if not any(ext in url.lower() for ext in ['.jpg', '.jpeg', '.png', '.gif']):
                return False
                
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —è–∫–æ—Å—Ç—ñ: {e}")
            return False

    def localize_meme(self, meme_data: Dict) -> Dict:
        """–ê–¥–∞–ø—Ç—É—î –º–µ–º –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó"""
        try:
            original_title = meme_data.get('title', '')
            
            # –î–æ–¥–∞—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            ukrainian_caption = random.choice(self.ukrainian_captions)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø–æ—Å—Ç
            localized = {
                'image_url': meme_data.get('url'),
                'caption': f"{ukrainian_caption}\n\nüí≠ {original_title}",
                'source_ups': meme_data.get('ups', 0),
                'source': meme_data.get('subreddit', 'Unknown')
            }
            
            return localized
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
            return meme_data

    async def find_best_meme(self) -> Optional[Dict]:
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫—Ä–∞—â–∏–π –º–µ–º –∑ —É—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª"""
        candidates = []
        
        # –ó–±–∏—Ä–∞—î–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∑ —É—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª
        for source_name in self.meme_sources:
            meme = await self.get_meme_from_source(source_name)
            if meme:
                candidates.append((meme, source_name))
                
        if not candidates:
            return None
            
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —è–∫—ñ—Å—Ç—é (upvotes)
        candidates.sort(key=lambda x: x[0].get('ups', 0), reverse=True)
        
        # –ë–µ—Ä—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π
        best_meme, source = candidates[0]
        
        # –õ–æ–∫–∞–ª—ñ–∑—É—î–º–æ
        return self.localize_meme(best_meme)

    async def post_meme_to_channel(self, meme_data: Dict) -> bool:
        """–ü—É–±–ª—ñ–∫—É—î –º–µ–º —É –∫–∞–Ω–∞–ª"""
        try:
            image_url = meme_data.get('image_url')
            caption = meme_data.get('caption')
            
            if not image_url:
                return False
                
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
            await self.bot.send_photo(
                chat_id=self.channel_id,
                photo=image_url,
                caption=caption,
                parse_mode='HTML'
            )
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['posts_today'] += 1
            self.stats['total_posts'] += 1
            self.stats['last_post_time'] = datetime.now()
            
            logger.info(f"‚úÖ –ú–µ–º –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ! –ó–∞–≥–∞–ª–æ–º —Å—å–æ–≥–æ–¥–Ω—ñ: {self.stats['posts_today']}")
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
            return False

    async def scheduled_post(self):
        """–ü–ª–∞–Ω–æ–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –º–µ–º—É"""
        logger.info("üîç –®—É–∫–∞—é –Ω–æ–≤–∏–π –º–µ–º –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó...")
        
        meme = await self.find_best_meme()
        if meme:
            success = await self.post_meme_to_channel(meme)
            if success:
                logger.info("üéâ –ú–µ–º —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
            else:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –º–µ–º")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—è—â–æ–≥–æ –º–µ–º—É")

    def setup_scheduler(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î —Ä–æ–∑–∫–ª–∞–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π"""
        for time_str in self.posting_schedule:
            schedule.every().day.at(time_str).do(
                lambda: asyncio.create_task(self.scheduled_post())
            )
        
        logger.info(f"üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {len(self.posting_schedule)} –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π –Ω–∞ –¥–µ–Ω—å")

    async def start_command(self, update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        await update.message.reply_text(
            "üêï –ü—Ä–∏–≤—ñ—Ç! –Ø –ë–æ–±—ñ–∫ - —Ç–≤—ñ–π –≤–µ—Å–µ–ª–∏–π –ø–æ–º—ñ—á–Ω–∏–∫!\n\n"
            "üéØ –ú–æ—è –º—ñ—Å—ñ—è: –¥—ñ–ª–∏—Ç–∏—Å—è –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ –º–µ–º–∞–º–∏ —â–æ–¥–Ω—è!\n"
            "‚è∞ –ü—É–±–ª—ñ–∫—É—é 7 —Ä–∞–∑—ñ–≤ –Ω–∞ –¥–µ–Ω—å –≤ [@BobikFun](https://t.me/BobikFun)\n"
            "üî• –¢—ñ–ª—å–∫–∏ —è–∫—ñ—Å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑ –≤–∏—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º\n\n"
            "–ö–æ–º–∞–Ω–¥–∏:\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/meme - –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º\n"
            "/test - —Ç–µ—Å—Ç–æ–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è\n"
            "/testchannel - —Ç–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫–∞–Ω–∞–ª—É",
            parse_mode='Markdown'
        )

    async def stats_command(self, update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats"""
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ–±—ñ–∫–∞:**

üìà –ü–æ—Å—Ç—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ: {self.stats['posts_today']}
üéØ –í—Å—å–æ–≥–æ –ø–æ—Å—Ç—ñ–≤: {self.stats['total_posts']}
‚è∞ –û—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ—Å—Ç: {self.stats['last_post_time'] or '–©–µ –Ω–µ –±—É–ª–æ'}

üïê –†–æ–∑–∫–ª–∞–¥: {len(self.posting_schedule)} —Ä–∞–∑—ñ–≤ –Ω–∞ –¥–µ–Ω—å
üé™ –î–∂–µ—Ä–µ–ª –º–µ–º—ñ–≤: {len(self.meme_sources)}
üîó –ö–∞–Ω–∞–ª: [@BobikFun](https://t.me/BobikFun)
"""
        await update.message.reply_text(stats_text, parse_mode='Markdown')

    async def meme_command(self, update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /meme - –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º"""
        await update.message.reply_text("üîç –ë–æ–±—ñ–∫ —à—É–∫–∞—î —Å–º—ñ—à–Ω–∏–π –º–µ–º...")
        
        meme = await self.find_best_meme()
        if meme:
            await update.message.reply_photo(
                photo=meme['image_url'],
                caption=meme['caption']
            )
        else:
            await update.message.reply_text("üòî –ë–æ–±—ñ–∫ –Ω–µ –∑–Ω–∞–π—à–æ–≤ –ø—ñ–¥—Ö–æ–¥—è—â–æ–≥–æ –º–µ–º—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ!")

    async def test_post_command(self, update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /test - —Ç–µ—Å—Ç–æ–≤–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è"""
        await update.message.reply_text("üß™ –¢–µ—Å—Ç—É—é –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é...")
        await self.scheduled_post()
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    async def test_channel_command(self, update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /testchannel - —Ç–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª–æ–º"""
        test_message = f"üß™ **–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è!**\n\n‚úÖ –ë–æ–±—ñ–∫ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ –∫–∞–Ω–∞–ª—É!\nüïê –ß–∞—Å —Ç–µ—Å—Ç—É: {datetime.now().strftime('%H:%M:%S')}"
        
        try:
            result = await self.bot.send_message(
                chat_id=self.channel_id,
                text=test_message,
                parse_mode='Markdown'
            )
            
            await update.message.reply_text(
                f"‚úÖ **–£—Å–ø—ñ—Ö!** –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!\n"
                f"üìä **Message ID:** {result.message_id}\n"
                f"üÜî **–ö–∞–Ω–∞–ª:** {self.channel_id}\n"
                f"üîó **–ü–µ—Ä–µ–≤—ñ—Ä:** https://t.me/BobikFun/{result.message_id}",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:**\n\n"
                f"üîç **–î–µ—Ç–∞–ª—ñ:** `{str(e)}`\n\n"
                f"üí° **–ü–µ—Ä–µ–≤—ñ—Ä:**\n"
                f"‚Ä¢ –ë–æ—Ç –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–∞–Ω–∞–ª—É?\n"
                f"‚Ä¢ –Ñ –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é?\n"
                f"‚Ä¢ Channel ID –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π?",
                parse_mode='Markdown'
            )

    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É

    async def run_bot(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
        application = Application.builder().token(self.bot_token).build()
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(CommandHandler("meme", self.meme_command))
        application.add_handler(CommandHandler("test", self.test_post_command))
        application.add_handler(CommandHandler("testchannel", self.test_channel_command))
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
        self.setup_scheduler()
        
        logger.info("üöÄ –ë–æ–±—ñ–∫ –∑–∞–ø—É—â–µ–Ω–∏–π! –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        await application.run_polling()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É
async def main():
    bot = BobikMemeBot()
    await bot.run_bot()

if __name__ == "__main__":
    # –î–ª—è Railway —Ç–∞ —ñ–Ω—à–∏—Ö —Ö–æ—Å—Ç–∏–Ω–≥—ñ–≤
    import threading
    
    bot = BobikMemeBot()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    scheduler_thread = threading.Thread(target=bot.run_scheduler, daemon=True)
    scheduler_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    asyncio.run(main())
