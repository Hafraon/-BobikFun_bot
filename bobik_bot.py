import requests
import asyncio
import random
import logging
import json
import time
from datetime import datetime, timedelta
from telegram import Bot
from telegram.ext import Application, CommandHandler
from typing import Dict, List, Optional
import threading

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AdvancedBobikBot:
    def __init__(self):
        self.bot_token = "7882259321:AAGGqql6LD6bzLHTOb1HdKUYs2IJBZqsd6E"
        self.channel_id = "@BobikFun"
        
        # –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'posts_today': 0,
            'total_posts': 0,
            'last_post_time': None,
            'successful_posts': 0,
            'failed_posts': 0,
            'best_engagement_time': None,
            'daily_stats': {}
        }
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ (UTC) - 11 –ø–æ—Å—Ç—ñ–≤/–¥–µ–Ω—å
        self.posting_schedule = [
            "05:00",  # –†–∞–Ω–Ω—è –ø—Ç–∞—à–∫–∞
            "07:00",  # –†–∞–Ω–∫–æ–≤–∏–π –∫–æ—Ñ–µ ‚òï
            "09:00",  # –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è üíº
            "11:30",  # –ü–µ—Ä–µ–¥ –æ–±—ñ–¥–æ–º
            "13:00",  # –û–±—ñ–¥–Ω—è –ø–µ—Ä–µ—Ä–≤–∞ üçΩÔ∏è
            "15:00",  # –ü—ñ—Å–ª—è –æ–±—ñ–¥—É ‚ö°
            "17:00",  # –ö—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è
            "19:00",  # –í–µ—á–µ—Ä–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å üè†
            "21:00",  # –ü—Ä–∞–π–º-—Ç–∞–π–º üì∫
            "22:30",  # –ü—ñ–∑–Ω—ñ–π –≤–µ—á—ñ—Ä
            "23:45"   # –ù—ñ—á–Ω—ñ —Å–æ–≤–∏ ü¶â
        ]
        
        # –†–æ–∑—à–∏—Ä–µ–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ –º–µ–º—ñ–≤
        self.meme_sources = {
            'general': [
                "https://meme-api.herokuapp.com/gimme",
                "https://meme-api.herokuapp.com/gimme/memes",
                "https://meme-api.herokuapp.com/gimme/dankmemes"
            ],
            'wholesome': [
                "https://meme-api.herokuapp.com/gimme/wholesomememes",
                "https://meme-api.herokuapp.com/gimme/MadeMeSmile"
            ],
            'tech': [
                "https://meme-api.herokuapp.com/gimme/ProgrammerHumor",
                "https://meme-api.herokuapp.com/gimme/softwaregore"
            ],
            'relatable': [
                "https://meme-api.herokuapp.com/gimme/me_irl",
                "https://meme-api.herokuapp.com/gimme/meirl"
            ]
        }
        
        # –¢—Ä–µ–Ω–¥–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –ø—ñ–¥–ø–∏—Å—ñ–≤ –∑–∞ —á–∞—Å–æ–º –¥–Ω—è
        self.time_based_captions = {
            'morning': [
                "üåÖ –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! –ë–æ–±—ñ–∫ –ø—Ä–∏–Ω—ñ—Å —Ä–∞–Ω–∫–æ–≤–∏–π –∑–∞—Ä—è–¥ –ø–æ–∑–∏—Ç–∏–≤—É!",
                "‚òï –†–∞–Ω–∫–æ–≤–∞ –ø–æ—Ä—Ü—ñ—è –≥—É–º–æ—Ä—É –≤—ñ–¥ –ë–æ–±—ñ–∫–∞!",
                "üêï –ü—Ä–æ–∫–∏–¥–∞–π—Å—è! –ë–æ–±—ñ–∫ –∑–Ω–∞–π—à–æ–≤ —â–æ—Å—å –≤–µ—Å–µ–ª–µ!",
                "üåû –°–æ–Ω—è—á–Ω–∏–π —Ä–∞–Ω–æ–∫ + —Å–º—ñ—à–Ω–∏–π –º–µ–º = —ñ–¥–µ–∞–ª—å–Ω–∏–π –¥–µ–Ω—å!"
            ],
            'work': [
                "üíº –†–æ–±–æ—á—ñ –±—É–¥–Ω—ñ? –ë–æ–±—ñ–∫ –¥–æ–ø–æ–º–æ–∂–µ!",
                "‚ö° –ó–∞—Ä—è–¥ –µ–Ω–µ—Ä–≥—ñ—ó –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è!",
                "üéØ –ë–æ–±—ñ–∫ –∑–Ω–∞—î —è–∫ –ø—ñ–¥–Ω—è—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π –Ω–∞ —Ä–æ–±–æ—Ç—ñ!",
                "üí™ –ú–æ—Ç–∏–≤–∞—Ü—ñ—è –≤—ñ–¥ –ë–æ–±—ñ–∫–∞ –¥–ª—è —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è!"
            ],
            'lunch': [
                "üçΩÔ∏è –û–±—ñ–¥–Ω—è –ø–µ—Ä–µ—Ä–≤–∞ –∑ –ë–æ–±—ñ–∫–æ–º!",
                "üòã –°–º–∞—á–Ω–æ–≥–æ + —Å–º—ñ—à–Ω–æ–≥–æ –≤—ñ–¥ –ë–æ–±—ñ–∫–∞!",
                "ü•ô –ß–∞—Å –æ–±—ñ–¥—É = —á–∞—Å –¥–ª—è –º–µ–º—ñ–≤!",
                "üçï –ë–æ–±—ñ–∫ –ø—ñ–¥–≥–æ—Ç—É–≤–∞–≤ –¥–µ—Å–µ—Ä—Ç –¥–ª—è —Ç–≤–æ–≥–æ –æ–±—ñ–¥—É!"
            ],
            'evening': [
                "üè† –ö—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è! –ß–∞—Å —Ä–æ–∑—Å–ª–∞–±–∏—Ç–∏—Å—è –∑ –ë–æ–±—ñ–∫–æ–º!",
                "üåÜ –í–µ—á—ñ—Ä–Ω—è –ø–æ—Ä—Ü—ñ—è –≥—É–º–æ—Ä—É –≤—ñ–¥ –ë–æ–±—ñ–∫–∞!",
                "üõãÔ∏è –ß–∞—Å —á—ñ–ª–∏—Ç–∏ –∑ –º–µ–º–∞–º–∏ –≤—ñ–¥ –ë–æ–±—ñ–∫–∞!",
                "üé¨ –í–µ—á—ñ—Ä–Ω—î —à–æ—É –≤—ñ–¥ –ë–æ–±—ñ–∫–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è!"
            ],
            'night': [
                "üåô –ù—ñ—á–Ω—ñ —Å–æ–≤–∏, —Ü–µ –¥–ª—è –≤–∞—Å!",
                "ü¶â –ë–æ–±—ñ–∫ –Ω–µ —Å–ø–∏—Ç—å - —Ä–æ–∑–≤–∞–∂–∞—î –Ω—ñ—á–Ω–∏—Ö –º–∞–Ω–¥—Ä—ñ–≤–Ω–∏–∫—ñ–≤!",
                "‚≠ê –ó—ñ—Ä–∫–æ–≤–∞ –Ω—ñ—á + –º–µ–º –≤—ñ–¥ –ë–æ–±—ñ–∫–∞ = —ñ–¥–µ–∞–ª—å–Ω–æ!",
                "üåÉ –ù—ñ—á–Ω–∏–π –≥—É–º–æ—Ä –≤—ñ–¥ –±–µ–∑—Å–æ–Ω–Ω–æ–≥–æ –ë–æ–±—ñ–∫–∞!"
            ]
        }
        
        # –¢—Ä–µ–Ω–¥–∏ —Ç–∞ —Ö–µ—à—Ç–µ–≥–∏
        self.trending_hashtags = [
            "#–º–µ–º", "#–≥—É–º–æ—Ä", "#–£–∫—Ä–∞—ó–Ω–∞", "#–Ω–∞—Å—Ç—Ä—ñ–π", 
            "#—Å–º—ñ—Ö", "#–ø–æ–∑–∏—Ç–∏–≤", "#–ë–æ–±—ñ–∫", "#–º–µ–ºUA"
        ]
        
        self.scheduler_running = False

    def get_time_category(self, hour: int) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —á–∞—Å—É –¥–ª—è –ø—ñ–¥–±–æ—Ä—É –ø—ñ–¥–ø–∏—Å—ñ–≤"""
        if 5 <= hour < 10:
            return 'morning'
        elif 10 <= hour < 14:
            return 'work'
        elif 14 <= hour < 17:
            return 'lunch'
        elif 17 <= hour < 22:
            return 'evening'
        else:
            return 'night'

    def get_meme_advanced(self) -> Optional[Dict]:
        """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø–æ—à—É–∫ –º–µ–º—ñ–≤ –∑ —Ä–æ—Ç–∞—Ü—ñ—î—é –¥–∂–µ—Ä–µ–ª"""
        all_sources = []
        
        # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–∂–µ—Ä–µ–ª–∞
        for category, urls in self.meme_sources.items():
            all_sources.extend(urls)
        
        # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –¥–ª—è —Ä–∞–Ω–¥–æ–º—ñ–∑–∞—Ü—ñ—ó
        random.shuffle(all_sources)
        
        for api_url in all_sources:
            try:
                response = requests.get(api_url, timeout=15)
                if response.status_code == 200:
                    data = response.json()
                    
                    if self.is_quality_meme_advanced(data):
                        return {
                            'url': data.get('url'),
                            'title': data.get('title', ''),
                            'ups': data.get('ups', 0),
                            'subreddit': data.get('subreddit', ''),
                            'source_api': api_url
                        }
                        
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ API {api_url}: {e}")
                continue
        
        # –Ø–∫—â–æ –≤—Å—ñ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ - —Ñ–æ–ª–ª–±–µ–∫ –º–µ–º–∏
        return self.get_fallback_meme()

    def is_quality_meme_advanced(self, data: Dict) -> bool:
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —è–∫–æ—Å—Ç—ñ –º–µ–º—ñ–≤"""
        try:
            url = data.get('url', '')
            title = data.get('title', '').lower()
            ups = data.get('ups', 0)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É
            if not any(ext in url.lower() for ext in ['.jpg', '.jpeg', '.png', '.gif']):
                return False
            
            # –§—ñ–ª—å—Ç—Ä –Ω–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            bad_words = ['nsfw', 'porn', 'sex', 'nude', 'politics', 'trump', 'biden']
            if any(word in title for word in bad_words):
                return False
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π –ø–æ—Ä—ñ–≥ —è–∫–æ—Å—Ç—ñ
            current_hour = datetime.now().hour
            
            # –í –ø—ñ–∫–æ–≤—ñ –≥–æ–¥–∏–Ω–∏ (—Ä–∞–Ω–æ–∫, –æ–±—ñ–¥, –≤–µ—á—ñ—Ä) - –≤–∏—â—ñ –≤–∏–º–æ–≥–∏
            if current_hour in [7, 8, 9, 12, 13, 18, 19, 20]:
                return ups >= 100
            else:
                return ups >= 50
                
        except Exception:
            return False

    def get_fallback_meme(self) -> Dict:
        """–†–µ–∑–µ—Ä–≤–Ω—ñ –º–µ–º–∏ –∫–æ–ª–∏ API –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å"""
        fallback_memes = [
            {
                'url': 'https://i.imgflip.com/1bij.jpg',
                'title': 'Success Kid - –∫–æ–ª–∏ –≤—Å–µ –π–¥–µ –∑–∞ –ø–ª–∞–Ω–æ–º!',
                'ups': 9999,
                'subreddit': 'fallback'
            },
            {
                'url': 'https://i.imgflip.com/30b1gx.jpg', 
                'title': 'Drake pointing - –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä!',
                'ups': 8888,
                'subreddit': 'fallback'
            },
            {
                'url': 'https://i.imgflip.com/1otk96.jpg',
                'title': 'Distracted Boyfriend - –∫–æ–ª–∏ —î –≤–∏–±—ñ—Ä!',
                'ups': 7777,
                'subreddit': 'fallback'
            }
        ]
        
        return random.choice(fallback_memes)

    def generate_smart_caption(self, meme_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä—É—î —Ä–æ–∑—É–º–Ω—ñ –ø—ñ–¥–ø–∏—Å–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Å—É —Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        current_hour = datetime.now().hour
        time_category = self.get_time_category(current_hour)
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –ø—ñ–¥–ø–∏—Å –∑–∞ —á–∞—Å–æ–º –¥–Ω—è
        time_caption = random.choice(self.time_based_captions[time_category])
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ –Ω–∞–∑–≤–∏ –º–µ–º—É
        title = meme_data.get('title', '')
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ö–µ—à—Ç–µ–≥–∏
        hashtags = random.sample(self.trending_hashtags, 2)
        hashtag_str = ' '.join(hashtags)
        
        # –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å
        caption = f"{time_caption}\n\nüí≠ {title}\n\n{hashtag_str}"
        
        return caption

    async def post_meme_to_channel_advanced(self) -> bool:
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –∑ –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é"""
        try:
            meme = self.get_meme_advanced()
            if not meme:
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–º")
                self.stats['failed_posts'] += 1
                return False
            
            caption = self.generate_smart_caption(meme)
            bot = Bot(token=self.bot_token)
            
            # –ü—É–±–ª—ñ–∫—É—î–º–æ –º–µ–º
            result = await bot.send_photo(
                chat_id=self.channel_id,
                photo=meme['url'],
                caption=caption
            )
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            current_time = datetime.now()
            self.stats['posts_today'] += 1
            self.stats['total_posts'] += 1
            self.stats['successful_posts'] += 1
            self.stats['last_post_time'] = current_time
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∞—Å–∞—Ö –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
            hour_key = current_time.strftime('%H')
            if hour_key not in self.stats['daily_stats']:
                self.stats['daily_stats'][hour_key] = 0
            self.stats['daily_stats'][hour_key] += 1
            
            logger.info(f"‚úÖ –ú–µ–º –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ! ID: {result.message_id}, –ß–∞—Å: {current_time.strftime('%H:%M')}")
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
            self.stats['failed_posts'] += 1
            return False

    def should_post_now(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ç—Ä–µ–±–∞ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑"""
        current_time = datetime.now().strftime('%H:%M')
        return current_time in self.posting_schedule

    async def scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        logger.info("üïê –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–∏–π!")
        
        while self.scheduler_running:
            try:
                if self.should_post_now():
                    logger.info(f"‚è∞ –ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {datetime.now().strftime('%H:%M')}")
                    await self.post_meme_to_channel_advanced()
                    
                    # –ß–µ–∫–∞—î–º–æ 70 —Å–µ–∫—É–Ω–¥ —â–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –≤ —Ç—É –∂ —Ö–≤–∏–ª–∏–Ω—É
                    await asyncio.sleep(70)
                else:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
                    await asyncio.sleep(30)
                    
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫—É: {e}")
                await asyncio.sleep(60)

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        if not self.scheduler_running:
            self.scheduler_running = True
            
            def run_scheduler():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.scheduler_loop())
            
            scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
            scheduler_thread.start()
            logger.info("üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!")

    def stop_scheduler(self):
        """–ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        self.scheduler_running = False
        logger.info("‚èπÔ∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ!")

    def get_analytics(self) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –¥–µ—Ç–∞–ª—å–Ω—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É"""
        success_rate = 0
        if self.stats['successful_posts'] + self.stats['failed_posts'] > 0:
            success_rate = (self.stats['successful_posts'] / 
                          (self.stats['successful_posts'] + self.stats['failed_posts']) * 100)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—É –≥–æ–¥–∏–Ω—É
        best_hour = "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"
        if self.stats['daily_stats']:
            best_hour_key = max(self.stats['daily_stats'], key=self.stats['daily_stats'].get)
            best_hour = f"{best_hour_key}:00"
        
        analytics = f"""
üìä **–†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ë–æ–±—ñ–∫–∞:**

üìà **–û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ü–æ—Å—Ç—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ: {self.stats['posts_today']}
‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ—Å—Ç—ñ–≤: {self.stats['total_posts']}
‚Ä¢ –£—Å–ø—ñ—à–Ω–∏—Ö: {self.stats['successful_posts']}
‚Ä¢ –ù–µ–≤–¥–∞–ª–∏—Ö: {self.stats['failed_posts']}
‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%

‚è∞ **–ß–∞—Å–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞:**
‚Ä¢ –û—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ—Å—Ç: {self.stats['last_post_time'] or '–©–µ –Ω–µ –±—É–ª–æ'}
‚Ä¢ –ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—àa –≥–æ–¥–∏–Ω–∞: {best_hour}
‚Ä¢ –†–æ–∑–∫–ª–∞–¥: {len(self.posting_schedule)} –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π/–¥–µ–Ω—å

üéØ **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**
‚Ä¢ –î–∂–µ—Ä–µ–ª –º–µ–º—ñ–≤: {sum(len(urls) for urls in self.meme_sources.values())}
‚Ä¢ –ê–≤—Ç–æ–ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' if self.scheduler_running else '‚ùå –í–∏–º–∫–Ω–µ–Ω–∏–π'}
‚Ä¢ –ö–∞–Ω–∞–ª: @BobikFun
"""
        return analytics

    # –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
    async def start_command(self, update, context):
        await update.message.reply_text(
            "üêï –ü—Ä–∏–≤—ñ—Ç! –Ø –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –ë–æ–±—ñ–∫!\n\n"
            "üöÄ **–ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:**\n"
            "‚Ä¢ 11 –∞–≤—Ç–æ–ø–æ—Å—Ç—ñ–≤ –Ω–∞ –¥–µ–Ω—å\n"
            "‚Ä¢ –†–æ–∑—É–º–Ω—ñ –ø—ñ–¥–ø–∏—Å–∏ –∑–∞ —á–∞—Å–æ–º\n"
            "‚Ä¢ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞\n"
            "‚Ä¢ –ú–Ω–æ–∂–∏–Ω–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ –º–µ–º—ñ–≤\n\n"
            "üì± **–ö–æ–º–∞–Ω–¥–∏:**\n"
            "/meme - –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–º\n"
            "/test - –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤ –∫–∞–Ω–∞–ª\n"
            "/analytics - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/schedule - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥–æ–º\n"
            "/status - –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å",
            parse_mode='Markdown'
        )

    async def meme_command(self, update, context):
        await update.message.reply_text("üîç –®—É–∫–∞—é –Ω–∞–π–∫—Ä–∞—â–∏–π –º–µ–º...")
        
        meme = self.get_meme_advanced()
        if meme:
            caption = self.generate_smart_caption(meme)
            await update.message.reply_photo(photo=meme['url'], caption=caption)
        else:
            await update.message.reply_text("üòî –ù–µ –∑–Ω–∞–π—à–æ–≤ –º–µ–º—É, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

    async def test_command(self, update, context):
        await update.message.reply_text("üß™ –ü—É–±–ª—ñ–∫—É—é —Ç–µ—Å—Ç–æ–≤–∏–π –º–µ–º...")
        
        success = await self.post_meme_to_channel_advanced()
        if success:
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –º–µ–º –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó!")

    async def analytics_command(self, update, context):
        analytics_text = self.get_analytics()
        await update.message.reply_text(analytics_text, parse_mode='Markdown')

    async def schedule_command(self, update, context):
        schedule_text = f"""
‚è∞ **–†–æ–∑–∫–ª–∞–¥ –∞–≤—Ç–æ–ø—É–±–ª—ñ–∫–∞—Ü—ñ–π (UTC):**

üåÖ **–†–∞–Ω–æ–∫:**
‚Ä¢ 05:00 - –†–∞–Ω–Ω—è –ø—Ç–∞—à–∫–∞
‚Ä¢ 07:00 - –†–∞–Ω–∫–æ–≤–∞ –∫–∞–≤–∞ ‚òï
‚Ä¢ 09:00 - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è üíº

üåû **–î–µ–Ω—å:**
‚Ä¢ 11:30 - –ü–µ—Ä–µ–¥ –æ–±—ñ–¥–æ–º  
‚Ä¢ 13:00 - –û–±—ñ–¥–Ω—è –ø–µ—Ä–µ—Ä–≤–∞ üçΩÔ∏è
‚Ä¢ 15:00 - –ü—ñ—Å–ª—è –æ–±—ñ–¥—É ‚ö°
‚Ä¢ 17:00 - –ö—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è

üåÜ **–í–µ—á—ñ—Ä:**
‚Ä¢ 19:00 - –í–µ—á–µ—Ä–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å üè†
‚Ä¢ 21:00 - –ü—Ä–∞–π–º-—Ç–∞–π–º üì∫
‚Ä¢ 22:30 - –ü—ñ–∑–Ω—ñ–π –≤–µ—á—ñ—Ä
‚Ä¢ 23:45 - –ù—ñ—á–Ω—ñ —Å–æ–≤–∏ ü¶â

üìä **–í—Å—å–æ–≥–æ: {len(self.posting_schedule)} –ø–æ—Å—Ç—ñ–≤/–¥–µ–Ω—å**
üîÑ **–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' if self.scheduler_running else '‚ùå –í–∏–º–∫–Ω–µ–Ω–∏–π'}**
"""
        await update.message.reply_text(schedule_text, parse_mode='Markdown')

    async def status_command(self, update, context):
        current_time = datetime.now()
        next_post_times = []
        
        for time_str in self.posting_schedule:
            hour, minute = map(int, time_str.split(':'))
            post_time = current_time.replace(hour=hour, minute=minute, second=0, microsecond=0)
            if post_time <= current_time:
                post_time += timedelta(days=1)
            next_post_times.append(post_time)
        
        next_post = min(next_post_times)
        time_until_next = next_post - current_time
        
        status_text = f"""
ü§ñ **–°—Ç–∞—Ç—É—Å –ë–æ–±—ñ–∫–∞:**

‚è∞ **–ß–∞—Å –∑–∞—Ä–∞–∑:** {current_time.strftime('%H:%M:%S UTC')}
‚è≠Ô∏è **–ù–∞—Å—Ç—É–ø–Ω–∏–π –ø–æ—Å—Ç:** {next_post.strftime('%H:%M')} 
‚è≥ **–ß–µ—Ä–µ–∑:** {str(time_until_next).split('.')[0]}

üîÑ **–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫:** {'üü¢ –ü—Ä–∞—Ü—é—î' if self.scheduler_running else 'üî¥ –ó—É–ø–∏–Ω–µ–Ω–∏–π'}
üìä **–ü–æ—Å—Ç—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ:** {self.stats['posts_today']}/11
üéØ **–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å:** {(self.stats['successful_posts']/(max(1, self.stats['successful_posts'] + self.stats['failed_posts']))*100):.1f}%
"""
        await update.message.reply_text(status_text, parse_mode='Markdown')

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Ä–æ–∑–∫–ª–∞–¥–æ–º"""
    bot = AdvancedBobikBot()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(bot.bot_token).build()
    
    # –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CommandHandler("meme", bot.meme_command))
    application.add_handler(CommandHandler("test", bot.test_command))
    application.add_handler(CommandHandler("analytics", bot.analytics_command))
    application.add_handler(CommandHandler("schedule", bot.schedule_command))
    application.add_handler(CommandHandler("status", bot.status_command))
    
    # –ó–ê–ü–£–°–ö–ê–Ñ–ú–û –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–ô –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö
    bot.start_scheduler()
    
    logger.info("üöÄ –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –ë–æ–±—ñ–∫ –∑–∞–ø—É—â–µ–Ω–∏–π –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Ä–æ–∑–∫–ª–∞–¥–æ–º!")
    logger.info(f"üìÖ –ë—É–¥–µ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ {len(bot.posting_schedule)} –º–µ–º—ñ–≤ –Ω–∞ –¥–µ–Ω—å")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
