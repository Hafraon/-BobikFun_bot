import requests
import asyncio
import random
import logging
import json
import time
import os
from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from typing import Dict, List, Optional
import threading

# AI —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è
try:
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    print("‚ö†Ô∏è OpenAI –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü—Ä–∞—Ü—é—î–º–æ –±–µ–∑ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó.")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AdvancedBobikBot:
    def __init__(self):
        self.bot_token = "7882259321:AAGGqql6LD6bzLHTOb1HdKUYs2IJBZqsd6E"
        self.channel_id = "@BobikFun"
        
        # AI –∫–ª—ñ—î–Ω—Ç
        self.openai_client = None
        if OPENAI_AVAILABLE:
            openai_key = os.getenv('OPENAI_API_KEY')
            if openai_key:
                self.openai_client = OpenAI(api_key=openai_key)
                logger.info("ü§ñ ChatGPT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞")
            else:
                logger.info("üîë OPENAI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ environment variables")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'posts_today': 0,
            'total_posts': 0,
            'last_post_time': None,
            'successful_posts': 0,
            'failed_posts': 0,
            'localized_posts': 0,
            'posted_memes': set()
        }
        
        # –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ (UTC) - –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏ –¥–æ–¥–∞–π—Ç–µ +2 –≥–æ–¥–∏–Ω–∏
        self.posting_schedule = [
            "05:00",  # 07:00 –ö–∏—ó–≤ - –†–∞–Ω–∫–æ–≤–∞ –∫–∞–≤–∞ ‚òï
            "07:00",  # 09:00 –ö–∏—ó–≤ - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è üíº
            "09:30",  # 11:30 –ö–∏—ó–≤ - –ü–µ—Ä–µ–¥ –æ–±—ñ–¥–æ–º
            "11:00",  # 13:00 –ö–∏—ó–≤ - –û–±—ñ–¥–Ω—è –ø–µ—Ä–µ—Ä–≤–∞ üçΩÔ∏è
            "13:00",  # 15:00 –ö–∏—ó–≤ - –ü—ñ—Å–ª—è –æ–±—ñ–¥—É ‚ö°
            "15:00",  # 17:00 –ö–∏—ó–≤ - –ö—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è
            "17:00",  # 19:00 –ö–∏—ó–≤ - –í–µ—á–µ—Ä–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å üè†
            "19:00",  # 21:00 –ö–∏—ó–≤ - –ü—Ä–∞–π–º-—Ç–∞–π–º üì∫
            "20:30",  # 22:30 –ö–∏—ó–≤ - –ü—ñ–∑–Ω—ñ–π –≤–µ—á—ñ—Ä
            "21:45",  # 23:45 –ö–∏—ó–≤ - –ù—ñ—á–Ω—ñ —Å–æ–≤–∏ ü¶â
            "23:00"   # 01:00 –ö–∏—ó–≤ - –ü—ñ–∑–Ω–æ –ø—Ä–∞—Ü—é—é—á—ñ
        ]
        
        self.scheduler_running = False
        
        # –ü–æ–∫—Ä–∞—â–µ–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ –º–µ–º—ñ–≤
        self.meme_sources = [
            "https://meme-api.herokuapp.com/gimme",
            "https://meme-api.com/gimme", 
            "https://api.reddit.com/r/memes/hot.json?limit=50",
            "https://meme-api.herokuapp.com/gimme/memes",
            "https://meme-api.herokuapp.com/gimme/dankmemes",
            "https://meme-api.herokuapp.com/gimme/wholesomememes",
            "https://meme-api.herokuapp.com/gimme/me_irl",
            "https://meme-api.herokuapp.com/gimme/ProgrammerHumor"
        ]
        
        # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ø—ñ–¥–ø–∏—Å–∏ –∑–∞ —á–∞—Å–æ–º –¥–Ω—è
        self.time_based_captions = {
            'morning': [
                "üåÖ –ö–æ–ª–∏ –ø—Ä–æ–∫–∏–Ω—É–≤—Å—è —ñ –∑—Ä–æ–∑—É–º—ñ–≤, —â–æ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ –≤–∏—Ö—ñ–¥–Ω–∏–π:",
                "‚òï –†–∞–Ω–∫–æ–≤–∞ –∫–∞–≤–∞ —ñ –º–µ–º - —î–¥–∏–Ω–µ —â–æ —Ç—Ä–∏–º–∞—î –Ω–∞ –ø–ª–∞–≤—É",
                "üêï –ü–æ–∫–∏ —Ç–∏ —Å–ø–∞–≤, –ë–æ–±—ñ–∫ –≥–æ—Ç—É–≤–∞–≤ —â–æ—Å—å —Å–º—ñ—à–Ω–µ",
                "üåû –†–∞–Ω–æ–∫ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ vs —Ç–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π:"
            ],
            'work': [
                "üíª –ö–æ–ª–∏ –±–æ—Å –ø–∏—Ç–∞—î –ø—Ä–æ –¥–µ–¥–ª–∞–π–Ω, –∞ —Ç–∏ —â–µ –Ω–µ –ø–æ—á–∏–Ω–∞–≤:",
                "üì± –ü–µ—Ä–µ—Ä–≤–∞ –Ω–∞ –º–µ–º —Å–µ—Ä–µ–¥ —Ä–æ–±–æ—á–æ–≥–æ —Ö–∞–æ—Å—É",
                "ü§î –ö–æ–ª–∏ —Ä–æ–±–∏—à –≤–∏–≥–ª—è–¥, —â–æ –ø—Ä–∞—Ü—é—î—à:",
                "üíº –†–æ–±–æ—á—ñ –±—É–¥–Ω—ñ vs —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—å:",
                "‚å®Ô∏è –ö–æ–¥-—Ä–µ–≤'—é vs –º–æ—ó –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è:"
            ],
            'lunch': [
                "üçî –û–±—ñ–¥–Ω—è –ø–µ—Ä–µ—Ä–≤–∞ - —Å–≤—è—â–µ–Ω–Ω–∏–π —á–∞—Å –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞",
                "ü•™ –ö–æ–ª–∏ —ó—Å–∏ —ñ –¥–∏–≤–∏—à—Å—è –º–µ–º–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ",
                "üòã –á–∂–∞ —Å–º–∞—á–Ω—ñ—à–∞ –ø—ñ–¥ –º–µ–º—á–∏–∫–∏ –≤—ñ–¥ –ë–æ–±—ñ–∫–∞",
                "üçï –û–±—ñ–¥ –≤ –æ—Ñ—ñ—Å—ñ vs –æ–±—ñ–¥ –≤–¥–æ–º–∞:"
            ],
            'evening': [
                "üè† –ù–∞—Ä–µ—à—Ç—ñ –¥–æ–º–∞! –ß–∞—Å –¥–ª—è —è–∫—ñ—Å–Ω–∏—Ö –º–µ–º—ñ–≤",
                "üõãÔ∏è –ü—ñ—Å–ª—è —Ä–æ–±–æ—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥–∏–≤–∞–Ω —ñ –º–µ–º–∞—Å–∏",
                "üì∫ –ö–æ–ª–∏ –≤–∏–±–∏—Ä–∞—î—à –º—ñ–∂ —Å–µ—Ä—ñ–∞–ª–æ–º —ñ –º–µ–º–∞–º–∏:",
                "üåÜ –ö—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è - –ø–æ—á–∞–ª–æ—Å—è –∂–∏—Ç—Ç—è"
            ],
            'night': [
                "üåô –û 23:00: '–©–µ –æ–¥–∏–Ω –º–µ–º—á–∏–∫ —ñ —Å–ø–∞—Ç–∏'",
                "ü¶â –ù—ñ—á–Ω–∏–π —Å–∫—Ä–æ–ª –º–µ–º—ñ–≤ - –º–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞",
                "üì± –ö–æ–ª–∏ –º–∞–≤ –ª—è–≥—Ç–∏ —Å–ø–∞—Ç–∏ 2 –≥–æ–¥–∏–Ω–∏ —Ç–æ–º—É:",
                "‚≠ê –ù—ñ—á–Ω–∏–π Telegram —Å–µ—Ä—Ñ—ñ–Ω–≥ –≤ –¥—ñ—ó"
            ]
        }
        
        # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Ö–µ—à—Ç–µ–≥–∏
        self.trending_hashtags = [
            "#–º–µ–º—á–∏–∫", "#–≥—É–º–æ—Ä", "#—Ä–µ–ª–µ–π—Ç–∞–±–ª", "#–Ω–∞—Å—Ç—Ä—ñ–π", 
            "#–∂–∏—Ç—Ç—è", "#—Ä–æ–±–æ—Ç–∞", "#–ø–æ–Ω–µ–¥—ñ–ª–æ–∫", "#–∫–∞–≤–∞",
            "#—É–∫—Ä–∞—ó–Ω–∞", "#–±–æ–±—ñ–∫", "#—Å–º—ñ—à–Ω–æ", "#–º–µ–º–∞—Å"
        ]

    def get_time_category(self, hour: int) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —á–∞—Å—É –¥–ª—è –ø—ñ–¥–±–æ—Ä—É –ø—ñ–¥–ø–∏—Å—ñ–≤ (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–∏—ó–≤—Å—å–∫–æ–≥–æ —á–∞—Å—É)"""
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ UTC –≤ –∫–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å (+2)
        kyiv_hour = (hour + 2) % 24
        
        if 5 <= kyiv_hour < 10:
            return 'morning'
        elif 10 <= kyiv_hour < 14:
            return 'work'
        elif 14 <= kyiv_hour < 17:
            return 'lunch'
        elif 17 <= kyiv_hour < 22:
            return 'evening'
        else:
            return 'night'

    def localize_meme_with_ai(self, meme_title: str) -> str:
        """–õ–æ–∫–∞–ª—ñ–∑—É—î –º–µ–º —á–µ—Ä–µ–∑ ChatGPT"""
        if not self.openai_client or not meme_title:
            return meme_title
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–µ–∫—Å—Ç –≤–∂–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
        ukrainian_chars = '–∞–±–≤–≥“ë–¥–µ—î–∂–∑–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è'
        ukrainian_count = sum(1 for char in meme_title.lower() if char in ukrainian_chars)
        total_alpha = len([char for char in meme_title.lower() if char.isalpha()])
        
        if total_alpha > 0 and ukrainian_count / total_alpha > 0.3:
            return meme_title  # –í–∂–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
            
        try:
            response = self.openai_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{
                    "role": "user",
                    "content": f"–ê–¥–∞–ø—Ç—É–π —Ü–µ–π –º–µ–º –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó IT –∞—É–¥–∏—Ç–æ—Ä—ñ—ó 16-35 —Ä–æ–∫—ñ–≤, –∑–±–µ—Ä—ñ–≥—à–∏ –≥—É–º–æ—Ä —Ç–∞ —Å—É—Ç—å:\n\n'{meme_title}'\n\n–ü–µ—Ä–µ–∫–ª–∞–¥–∏ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É —Ç–∞ –∑–∞–º—ñ–Ω–∏ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª—ñ –∞–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∞–Ω–∞–ª–æ–≥–∏. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤, –±–µ–∑ –µ–º–æ–¥–∑—ñ."
                }],
                max_tokens=120,
                temperature=0.7
            )
            
            localized = response.choices[0].message.content.strip()
            localized = localized.replace('"', '').strip()
            
            if localized and len(localized) > 10:
                self.stats['localized_posts'] += 1
                logger.info(f"üá∫üá¶ –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {meme_title[:30]}... ‚Üí {localized[:30]}...")
                return localized
                
        except Exception as e:
            logger.error(f"‚ùå AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–º–∏–ª–∫–∞: {e}")
            
        return meme_title

    def get_meme(self) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º—É—î –º–µ–º –∑ –º–Ω–æ–∂–∏–Ω–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª –∑ –≤—ñ–¥–º–æ–≤–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—é"""
        
        # –ü–µ—Ä–µ–º—ñ—à—É—î–º–æ –¥–∂–µ—Ä–µ–ª–∞ –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
        sources = self.meme_sources.copy()
        random.shuffle(sources)
        
        for api_url in sources:
            try:
                logger.info(f"üîç –°–ø—Ä–æ–±—É—é API: {api_url}")
                
                headers = {'User-Agent': 'BobikBot/2.0 (Ukrainian Meme Bot)'}
                response = requests.get(api_url, headers=headers, timeout=15)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if 'reddit.com' in api_url:
                        # Reddit API format
                        posts = data.get('data', {}).get('children', [])
                        for post in posts[:10]:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–ø 10
                            post_data = post.get('data', {})
                            if self.is_quality_meme(post_data):
                                return {
                                    'url': post_data.get('url'),
                                    'title': post_data.get('title', ''),
                                    'score': post_data.get('score', 0),
                                    'source': 'reddit'
                                }
                    else:
                        # Meme API format
                        if self.is_quality_meme(data):
                            return {
                                'url': data.get('url'),
                                'title': data.get('title', '–ú–µ–º'),
                                'score': data.get('ups', 100),
                                'source': 'meme-api'
                            }
                            
            except Exception as e:
                logger.error(f"‚ùå API {api_url} –ø–æ–º–∏–ª–∫–∞: {e}")
                continue
        
        # Fallback –º–µ–º —è–∫—â–æ –≤—Å—ñ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ
        logger.warning("üÜò –í—Å—ñ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é fallback")
        return {
            'url': 'https://i.imgflip.com/1bij.jpg',
            'title': 'Success Kid - –∫–æ–ª–∏ –≤—Å—ñ API –≤–ø–∞–ª–∏, –∞–ª–µ –ë–æ–±—ñ–∫ –Ω–µ –∑–¥–∞—î—Ç—å—Å—è!',
            'score': 9999,
            'source': 'fallback'
        }

    def is_quality_meme(self, data: Dict) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —è–∫—ñ—Å—Ç—å –º–µ–º—É"""
        try:
            url = data.get('url', '')
            title = data.get('title', '').lower()
            score = data.get('score', data.get('ups', 0))
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if not any(ext in url.lower() for ext in ['.jpg', '.jpeg', '.png', '.gif', 'i.redd.it', 'i.imgur.com']):
                return False
            
            # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            if score < 50:
                return False
            
            # –§—ñ–ª—å—Ç—Ä –Ω–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            blacklist = ['nsfw', 'porn', 'sex', 'nude', 'politics']
            if any(word in title for word in blacklist):
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ (–ø—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)
            if url in self.stats['posted_memes']:
                return False
                
            return True
            
        except Exception:
            return False

    def generate_smart_caption(self, meme_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä—É—î —Ä–æ–∑—É–º–Ω—ñ –ø—ñ–¥–ø–∏—Å–∏ –∑ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é"""
        
        current_hour = datetime.now().hour
        time_category = self.get_time_category(current_hour)
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –ø—ñ–¥–ø–∏—Å –∑–∞ —á–∞—Å–æ–º –¥–Ω—è
        time_caption = random.choice(self.time_based_captions[time_category])
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–∞–∑–≤—É –º–µ–º—É
        title = meme_data.get('title', '')
        
        # AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∞
        if self.openai_client and title:
            title = self.localize_meme_with_ai(title)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ö–µ—à—Ç–µ–≥–∏
        hashtags = random.sample(self.trending_hashtags, 2)
        hashtag_str = ' '.join(hashtags)
        
        # –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å
        ai_marker = " ü§ñ" if meme_data.get('source') != 'fallback' and self.openai_client else ""
        
        caption = f"{time_caption}\n\nüí≠ {title}{ai_marker}\n\nüìä –ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å: {meme_data.get('score', 0)}\nüîó –î–∂–µ—Ä–µ–ª–æ: {meme_data.get('source', 'unknown')}\n\n{hashtag_str}"
        
        return caption

    async def post_meme_to_channel(self) -> bool:
        """–ü—É–±–ª—ñ–∫—É—î –º–µ–º –≤ –∫–∞–Ω–∞–ª"""
        try:
            meme = self.get_meme()
            if not meme:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–º")
                self.stats['failed_posts'] += 1
                return False
            
            caption = self.generate_smart_caption(meme)
            bot = Bot(token=self.bot_token)
            
            # –ü—É–±–ª—ñ–∫—É—î–º–æ –º–µ–º
            result = await bot.send_photo(
                chat_id=self.channel_id,
                photo=meme['url'],
                caption=caption
            )
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            current_time = datetime.now()
            self.stats['posts_today'] += 1
            self.stats['total_posts'] += 1
            self.stats['successful_posts'] += 1
            self.stats['last_post_time'] = current_time
            self.stats['posted_memes'].add(meme['url'])
            
            # –û—á–∏—â—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —è–∫—â–æ –∑–∞–±–∞–≥–∞—Ç–æ
            if len(self.stats['posted_memes']) > 500:
                self.stats['posted_memes'] = set(list(self.stats['posted_memes'])[-250:])
            
            logger.info(f"‚úÖ –ú–µ–º –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ! ID: {result.message_id}, AI: {'–¢–∞–∫' if self.openai_client else '–ù—ñ'}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
            self.stats['failed_posts'] += 1
            return False

    def should_post_now(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ç—Ä–µ–±–∞ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑"""
        current_time = datetime.now().strftime('%H:%M')
        return current_time in self.posting_schedule

    async def scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        logger.info("üïê –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–∏–π!")
        logger.info(f"üìÖ –†–æ–∑–∫–ª–∞–¥: {len(self.posting_schedule)} –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π –Ω–∞ –¥–µ–Ω—å")
        logger.info(f"ü§ñ AI —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' if self.openai_client else '‚ùå –í–∏–º–∫–Ω–µ–Ω–∏–π'}")
        
        while self.scheduler_running:
            try:
                if self.should_post_now():
                    kyiv_time = (datetime.now().hour + 2) % 24
                    logger.info(f"‚è∞ –ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {datetime.now().strftime('%H:%M')} UTC (–ö–∏—ó–≤: {kyiv_time:02d}:{datetime.now().minute:02d})")
                    
                    success = await self.post_meme_to_channel()
                    if success:
                        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞")
                    
                    # –ß–µ–∫–∞—î–º–æ 70 —Å–µ–∫—É–Ω–¥ —â–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏
                    await asyncio.sleep(70)
                else:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
                    await asyncio.sleep(30)
                    
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫—É: {e}")
                await asyncio.sleep(60)

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        if not self.scheduler_running:
            self.scheduler_running = True
            
            def run_scheduler():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.scheduler_loop())
            
            scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
            scheduler_thread.start()
            logger.info("üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!")

    def stop_scheduler(self):
        """–ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        self.scheduler_running = False
        logger.info("‚èπÔ∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ!")

    def create_main_menu(self) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
        keyboard = [
            [
                InlineKeyboardButton("üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="analytics"),
                InlineKeyboardButton("üß™ –¢–µ—Å—Ç –ø–æ—Å—Ç", callback_data="test_post")
            ],
            [
                InlineKeyboardButton("üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º", callback_data="random_meme"),
                InlineKeyboardButton("üìÖ –†–æ–∑–∫–ª–∞–¥", callback_data="schedule")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è", callback_data="management"),
                InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç—É—Å", callback_data="ai_status")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def button_callback(self, update, context):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "test_post":
            await query.edit_message_text("üß™ –ü—É–±–ª—ñ–∫—É—é —Ç–µ—Å—Ç–æ–≤–∏–π –º–µ–º –∑ AI –æ–±—Ä–æ–±–∫–æ—é...")
            success = await self.post_meme_to_channel()
            
            text = "‚úÖ **–¢–µ—Å—Ç–æ–≤–∏–π –º–µ–º –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!**\n\n" if success else "‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó**\n\n"
            text += f"ü§ñ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if self.openai_client else '‚ùå –í–∏–º–∫–Ω–µ–Ω–∞'}\n"
            text += f"üìä –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø–æ—Å—Ç—ñ–≤: {self.stats['localized_posts']}\n\n"
            text += "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–∞–Ω–∞–ª @BobikFun"
                
            await query.edit_message_text(text, parse_mode='Markdown')
            
        elif query.data == "ai_status":
            if self.openai_client:
                ai_text = f"ü§ñ **AI –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–ö–¢–ò–í–ù–ò–ô**\n\n"
                ai_text += f"üìä **–õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø–æ—Å—Ç—ñ–≤**: {self.stats['localized_posts']}\n"
                ai_text += f"üéØ **–§—É–Ω–∫—Ü—ñ—ó**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —É–∫—Ä–∞—ó–Ω—ñ–∑–∞—Ü—ñ—è –º–µ–º—ñ–≤\n"
                ai_text += f"üß† **–ú–æ–¥–µ–ª—å**: GPT-3.5-turbo\n\n"
                ai_text += "üí° **AI –¥–æ–ø–æ–º–∞–≥–∞—î:**\n"
                ai_text += "‚Ä¢ –ü–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –º–µ–º–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é\n"
                ai_text += "‚Ä¢ –ê–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n"
                ai_text += "‚Ä¢ –ü–æ–∫—Ä–∞—â—É–≤–∞—Ç–∏ –∑—Ä–æ–∑—É–º—ñ–ª—ñ—Å—Ç—å –¥–ª—è —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤"
            else:
                ai_text = "ü§ñ **AI –°—Ç–∞—Ç—É—Å: ‚ùå –ù–ï–ê–ö–¢–ò–í–ù–ò–ô**\n\n"
                ai_text += "üîë **–ü–æ—Ç—Ä—ñ–±–Ω–æ**: OPENAI_API_KEY –≤ Railway\n"
                ai_text += "‚ö° **–ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º**: –ë–∞–∑–æ–≤–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è\n\n"
                ai_text += "**–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó AI:**\n"
                ai_text += "1. –û—Ç—Ä–∏–º–∞–π—Ç–µ –∫–ª—é—á: platform.openai.com/api-keys\n"
                ai_text += "2. –î–æ–¥–∞–π—Ç–µ –≤ Railway Variables\n"
                ai_text += "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞"
                
            await query.edit_message_text(ai_text, parse_mode='Markdown')
            
        elif query.data == "analytics":
            success_rate = 0
            if self.stats['successful_posts'] + self.stats['failed_posts'] > 0:
                success_rate = (self.stats['successful_posts'] / 
                              (self.stats['successful_posts'] + self.stats['failed_posts']) * 100)
            
            analytics = f"üìä **–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ë–æ–±—ñ–∫–∞ 2.0:**\n\n"
            analytics += f"üìà **–ü–æ—Å—Ç—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ**: {self.stats['posts_today']}/11\n"
            analytics += f"üìä **–í—Å—å–æ–≥–æ –ø–æ—Å—Ç—ñ–≤**: {self.stats['total_posts']}\n"
            analytics += f"‚úÖ **–£—Å–ø—ñ—à–Ω–∏—Ö**: {self.stats['successful_posts']}\n"
            analytics += f"‚ùå **–ù–µ–≤–¥–∞–ª–∏—Ö**: {self.stats['failed_posts']}\n"
            analytics += f"üéØ **–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å**: {success_rate:.1f}%\n\n"
            analytics += f"ü§ñ **AI –º–µ—Ç—Ä–∏–∫–∏:**\n"
            analytics += f"‚Ä¢ –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {self.stats['localized_posts']} –ø–æ—Å—Ç—ñ–≤\n"
            analytics += f"‚Ä¢ AI —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' if self.openai_client else '‚ùå –í–∏–º–∫–Ω–µ–Ω–∏–π'}\n\n"
            analytics += f"‚è∞ **–û—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ—Å—Ç**: {self.stats['last_post_time'] or '–©–µ –Ω–µ –±—É–ª–æ'}\n"
            analytics += f"üìÖ **–†–æ–∑–∫–ª–∞–¥**: {len(self.posting_schedule)} –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π/–¥–µ–Ω—å"
            
            await query.edit_message_text(analytics, parse_mode='Markdown')

    async def start_command(self, update, context):
        await update.message.reply_text(
            "üêï **–ü—Ä–∏–≤—ñ—Ç! –Ø –ë–æ–±—ñ–∫ 2.0 –∑ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é!**\n\n"
            "üöÄ **–ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:**\n"
            f"‚Ä¢ ü§ñ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if self.openai_client else '‚ùå –ü–æ—Ç—Ä—ñ–±–µ–Ω API –∫–ª—é—á'}\n"
            "‚Ä¢ üì° 8+ –¥–∂–µ—Ä–µ–ª –º–µ–º—ñ–≤ –∑ –≤—ñ–¥–º–æ–≤–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—é\n"
            "‚Ä¢ üá∫üá¶ –ê–¥–∞–ø—Ç–æ–≤–∞–Ω–æ –ø—ñ–¥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —á–∞—Å (UTC+2)\n"
            "‚Ä¢ üìä –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞\n"
            "‚Ä¢ üéØ 11 –∞–≤—Ç–æ–ø–æ—Å—Ç—ñ–≤ –Ω–∞ –¥–µ–Ω—å\n\n"
            "üîó **–ö–∞–Ω–∞–ª:** @BobikFun\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
            reply_markup=self.create_main_menu(),
            parse_mode='Markdown'
        )

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    bot = AdvancedBobikBot()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(bot.bot_token).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start_command))
    application.add_handler(CallbackQueryHandler(bot.button_callback))
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    bot.start_scheduler()
    
    logger.info("üöÄ –ë–æ–±—ñ–∫ 2.0 –∑ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é –∑–∞–ø—É—â–µ–Ω–∏–π!")
    logger.info(f"ü§ñ AI —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' if bot.openai_client else '‚ö†Ô∏è –ë–∞–∑–æ–≤–∏–π —Ä–µ–∂–∏–º'}")
    logger.info(f"üìÖ –†–æ–∑–∫–ª–∞–¥: {len(bot.posting_schedule)} –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π –Ω–∞ –¥–µ–Ω—å")
    logger.info("üá∫üá¶ –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó!")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
