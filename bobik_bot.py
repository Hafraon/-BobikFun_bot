import requests
import asyncio
import random
import logging
import json
import time
import hashlib
import os
from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from typing import Dict, List, Optional
import threading

# –î–ª—è ChatGPT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
try:
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    print("‚ö†Ô∏è OpenAI –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü—Ä–∞—Ü—é—î–º–æ –±–µ–∑ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó.")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AdvancedBobikBot:
    def __init__(self):
        self.bot_token = "7882259321:AAGGqql6LD6bzLHTOb1HdKUYs2IJBZqsd6E"
        self.channel_id = "@BobikFun"
        
        # OpenAI –∫–ª—ñ—î–Ω—Ç (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        self.openai_client = None
        if OPENAI_AVAILABLE:
            openai_key = os.getenv('OPENAI_API_KEY')
            if openai_key:
                self.openai_client = OpenAI(api_key=openai_key)
                logger.info("ü§ñ ChatGPT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞")
            else:
                logger.info("üîë OPENAI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–∞—Ü—é—î–º–æ –±–µ–∑ AI.")
        
        # –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ —É–∫—Ä–∞—ó–Ω—ñ–∑–∞—Ü—ñ—î—é
        self.stats = {
            'posts_today': 0,
            'total_posts': 0,
            'last_post_time': None,
            'successful_posts': 0,
            'failed_posts': 0,
            'best_engagement_time': None,
            'daily_stats': {},
            'posted_memes': set(),
            'posted_hashes': set(),  # –•–µ—à—ñ –¥–ª—è –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—ó
            'hourly_posts': {},
            'last_api_check': None,
            'localized_posts': 0,  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤
            'api_failures': {},     # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–º–æ–≤ API
            'content_sources': {}   # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∂–µ—Ä–µ–ª –∫–æ–Ω—Ç–µ–Ω—Ç—É
        }
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó (UTC+2 = –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å)
        self.posting_schedule = [
            "03:00",  # 05:00 –ö–∏—ó–≤ - –†–∞–Ω–Ω—è –ø—Ç–∞—à–∫–∞
            "05:00",  # 07:00 –ö–∏—ó–≤ - –†–∞–Ω–∫–æ–≤–∞ –∫–∞–≤–∞ ‚òï
            "07:00",  # 09:00 –ö–∏—ó–≤ - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è üíº
            "09:30",  # 11:30 –ö–∏—ó–≤ - –ü–µ—Ä–µ–¥ –æ–±—ñ–¥–æ–º
            "11:00",  # 13:00 –ö–∏—ó–≤ - –û–±—ñ–¥–Ω—è –ø–µ—Ä–µ—Ä–≤–∞ üçΩÔ∏è
            "13:00",  # 15:00 –ö–∏—ó–≤ - –ü—ñ—Å–ª—è –æ–±—ñ–¥—É ‚ö°
            "15:00",  # 17:00 –ö–∏—ó–≤ - –ö—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è
            "17:00",  # 19:00 –ö–∏—ó–≤ - –í–µ—á–µ—Ä–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å üè†
            "19:00",  # 21:00 –ö–∏—ó–≤ - –ü—Ä–∞–π–º-—Ç–∞–π–º üì∫
            "20:30",  # 22:30 –ö–∏—ó–≤ - –ü—ñ–∑–Ω—ñ–π –≤–µ—á—ñ—Ä
            "21:45"   # 23:45 –ö–∏—ó–≤ - –ù—ñ—á–Ω—ñ —Å–æ–≤–∏ ü¶â
        ]
        
        self.scheduler_running = False
        
        # –ü–æ–∫—Ä–∞—â–µ–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞ –º–µ–º—ñ–≤ –∑ –≤—ñ–¥–º–æ–≤–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—é —Ç–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
        self.meme_sources = {
            'primary': {
                'reddit_memes': "https://api.reddit.com/r/memes/hot.json?limit=50",
                'reddit_dankmemes': "https://api.reddit.com/r/dankmemes/top.json?limit=50", 
                'reddit_wholesomememes': "https://api.reddit.com/r/wholesomememes/hot.json?limit=30"
            },
            'secondary': {
                'meme_api_1': "https://meme-api.herokuapp.com/gimme",
                'meme_api_2': "https://meme-api.com/gimme",
                'meme_api_3': "https://meme-api.herokuapp.com/gimme/memes"
            },
            'tech_specific': {
                'programmer_humor': "https://api.reddit.com/r/ProgrammerHumor/hot.json?limit=30",
                'software_gore': "https://api.reddit.com/r/softwaregore/hot.json?limit=20"
            },
            'backup': {
                'imgflip': "https://api.imgflip.com/get_memes",
                'random_api': "https://some-random-api.ml/meme"
            }
        }
        
        # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ñ –ø—ñ–¥–ø–∏—Å–∏ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é
        self.ukrainian_context = {
            'work_terms': {
                'job': '—Ä–æ–±–æ—Ç–∞', 'work': '–ø—Ä–∞—Ü—è', 'office': '–æ—Ñ—ñ—Å', 'boss': '–±–æ—Å',
                'deadline': '–¥–µ–¥–ª–∞–π–Ω', 'meeting': '–º—ñ—Ç–∏–Ω–≥', 'zoom': '–∑—É–º',
                'remote work': '–≤—ñ–¥–¥–∞–ª–µ–Ω–∞ —Ä–æ–±–æ—Ç–∞', 'freelance': '—Ñ—Ä—ñ–ª–∞–Ω—Å',
                'salary': '–∑–∞—Ä–ø–ª–∞—Ç–∞', 'overtime': '–ø–µ—Ä–µ—Ä–æ–±–∫–∞'
            },
            'tech_terms': {
                'code': '–∫–æ–¥', 'bug': '–±–∞–≥', 'debug': '–¥–µ–±–∞–≥', 'deploy': '–¥–µ–ø–ª–æ–π',
                'server': '—Å–µ—Ä–≤–µ—Ä', 'database': '–±–∞–∑–∞ –¥–∞–Ω–∏—Ö', 'api': '–∞–ø—ñ',
                'frontend': '—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥', 'backend': '–±–µ–∫–µ–Ω–¥', 'git': '–≥—ñ—Ç'
            },
            'life_terms': {
                'morning': '—Ä–∞–Ω–æ–∫', 'coffee': '–∫–∞–≤–∞', 'monday': '–ø–æ–Ω–µ–¥—ñ–ª–æ–∫',
                'weekend': '–≤–∏—Ö—ñ–¥–Ω—ñ', 'vacation': '–≤—ñ–¥–ø—É—Å—Ç–∫–∞', 'home': '–¥—ñ–º',
                'food': '—ó–∂–∞', 'sleep': '—Å–æ–Ω', 'money': '–≥—Ä–æ—à—ñ'
            }
        }
        
        # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –ø—ñ–¥–ø–∏—Å–∏ –∑–∞ —á–∞—Å–æ–º –¥–Ω—è
        self.time_based_captions = {
            'early_morning': [
                "üåÖ –†–∞–Ω–Ω—ñ –ø—Ç–∞—à–∫–∏, —Ü–µ–π –º–µ–º –¥–ª—è –≤–∞—Å!",
                "‚òï –ü–µ—Ä—à–∞ –∫–∞–≤–∞ —Ç–∞ —Å–≤—ñ–∂–∏–π –º–µ–º - —ñ–¥–µ–∞–ª—å–Ω–∏–π —Ä–∞–Ω–æ–∫",
                "üêï –ë–æ–±—ñ–∫ –≤–∂–µ –Ω–µ —Å–ø–∏—Ç—å, –∞ —Ç–∏?",
                "üåû –ù–æ–≤–∏–π –¥–µ–Ω—å = –Ω–æ–≤–∏–π –º–µ–º –≤—ñ–¥ –ë–æ–±—ñ–∫–∞"
            ],
            'morning': [
                "üåÖ –ö–æ–ª–∏ –ø—Ä–æ–∫–∏–Ω—É–≤—Å—è —ñ –∑—Ä–æ–∑—É–º—ñ–≤, —â–æ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ –≤–∏—Ö—ñ–¥–Ω–∏–π:",
                "‚òï –†–∞–Ω–∫–æ–≤–∞ –∫–∞–≤–∞ —ñ –º–µ–º - —î–¥–∏–Ω–µ —â–æ —Ç—Ä–∏–º–∞—î –Ω–∞ –ø–ª–∞–≤—É",
                "üíº –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è –≤ —Å—Ç–∏–ª—ñ –ë–æ–±—ñ–∫–∞",
                "üò¥ –ë—É–¥–∏–ª—å–Ω–∏–∫ –ø—Ä–æ—Ç–∏ —Ç–≤–æ—î—ó –≤–æ–ª—ñ –¥–æ –∂–∏—Ç—Ç—è:"
            ],
            'work_hours': [
                "üíª –ö–æ–ª–∏ –±–æ—Å –ø–∏—Ç–∞—î –ø—Ä–æ –ø—Ä–æ–≥—Ä–µ—Å, –∞ —Ç–∏ –¥–∏–≤–∏–≤—Å—è –º–µ–º–∏:",
                "üì± –û—Ñ—ñ—Ü—ñ–π–Ω–∞ –ø–µ—Ä–µ—Ä–≤–∞ –Ω–∞ –º–µ–º —Å–µ—Ä–µ–¥ —Ä–æ–±–æ—á–æ–≥–æ —Ö–∞–æ—Å—É",
                "ü§î –ö–æ–ª–∏ —Ä–æ–±–∏—à –≤–∏–≥–ª—è–¥, —â–æ –ø—Ä–∞—Ü—é—î—à:",
                "üíº –†–µ–∞–ª—å–Ω—ñ—Å—Ç—å –æ—Ñ—ñ—Å–Ω–æ–≥–æ –∂–∏—Ç—Ç—è:",
                "‚å®Ô∏è –ö–æ–¥ vs –º–æ—ó –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è:",
                "üìß –ö–æ–ª–∏ –≤ –ø'—è—Ç–Ω–∏—Ü—é –Ω–∞–¥—Ö–æ–¥–∏—Ç—å '—Ç–µ—Ä–º—ñ–Ω–æ–≤–∏–π' –ø—Ä–æ–µ–∫—Ç:"
            ],
            'lunch': [
                "üçî –û–±—ñ–¥–Ω—è –ø–µ—Ä–µ—Ä–≤–∞ - —Å–≤—è—â–µ–Ω–Ω–∏–π —á–∞—Å –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞",
                "ü•™ –ö–æ–ª–∏ —ó—Å–∏ —ñ –¥–∏–≤–∏—à—Å—è –º–µ–º–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ = –º—É–ª—å—Ç–∏—Ç–∞—Å–∫—ñ–Ω–≥",
                "üòã –á–∂–∞ —Å–º–∞—á–Ω—ñ—à–∞ –ø—ñ–¥ –º–µ–º—á–∏–∫–∏ –≤—ñ–¥ –ë–æ–±—ñ–∫–∞",
                "üçï –ü–ª–∞–Ω—É–≤–∞–≤ –∑–¥–æ—Ä–æ–≤–∏–π –æ–±—ñ–¥ vs —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—å:",
                "ü•ó –î—ñ—î—Ç–∞ vs —Ç–µ, —â–æ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ —ó–º:"
            ],
            'afternoon': [
                "‚ö° –ü—ñ—Å–ª—è–æ–±—ñ–¥–Ω—ñ–π –µ–Ω–µ—Ä–≥–µ—Ç–∏—á–Ω–∏–π —Å–ø–∞–¥ vs –¥–µ–¥–ª–∞–π–Ω–∏:",
                "üò¥ 15:00 - —á–∞—Å –∫–æ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –π–¥–µ —Å–ø–∞—Ç–∏",
                "üíº –î—Ä—É–≥–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è like:",
                "üî• –ö–æ–ª–∏ –¥–æ –∫—ñ–Ω—Ü—è —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è –∑–∞–ª–∏—à–∏–ª–æ—Å—è —Ç—Ä–æ—Ö–∏"
            ],
            'evening': [
                "üè† –ù–∞—Ä–µ—à—Ç—ñ –¥–æ–º–∞! –ß–∞—Å –¥–ª—è —è–∫—ñ—Å–Ω–∏—Ö –º–µ–º—ñ–≤",
                "üõãÔ∏è –ü—ñ—Å–ª—è —Ä–æ–±–æ—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥–∏–≤–∞–Ω —ñ –º–µ–º–∞—Å–∏",
                "üì∫ –ö–æ–ª–∏ –≤–∏–±–∏—Ä–∞—î—à –º—ñ–∂ —Å–µ—Ä—ñ–∞–ª–æ–º —ñ –º–µ–º–∞–º–∏:",
                "üåÜ –ö—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è - –ø–æ—á–∞–ª–æ—Å—è —Å–ø—Ä–∞–≤–∂–Ω—î –∂–∏—Ç—Ç—è",
                "üéÆ –ö–æ–ª–∏ –ø–ª–∞–Ω—É–≤–∞–≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∏–π –≤–µ—á—ñ—Ä:",
                "üçø –Ü–¥–µ–∞–ª—å–Ω–∏–π –≤–µ—á—ñ—Ä: –º–µ–º—á–∏–∫–∏ + —â–æ—Å—å —Å–º–∞—á–Ω–µ"
            ],
            'late_evening': [
                "üåÉ –í–µ—á—ñ—Ä–Ω—ñ–π –ø—Ä–∞–π–º-—Ç–∞–π–º –º–µ–º—ñ–≤ –≤—ñ–¥ –ë–æ–±—ñ–∫–∞",
                "üì± –ö–æ–ª–∏ —Å–∫—Ä–æ–ª–∏—à –º–µ–º–∏ –∑–∞–º—ñ—Å—Ç—å —Å–ø—Ä–∞–≤:",
                "üõãÔ∏è –í–µ—á—ñ—Ä–Ω—ñ–π —á—ñ–ª —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ",
                "üé¨ –ö—Ä–∞—â–∏–π –≤–µ—á—ñ—Ä–Ω—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Ü–µ –º–µ–º–∏"
            ],
            'night': [
                "üåô –û 23:00: '–©–µ –æ–¥–∏–Ω –º–µ–º—á–∏–∫ —ñ —Å–ø–∞—Ç–∏'",
                "ü¶â –ù—ñ—á–Ω–∏–π —Å–∫—Ä–æ–ª –º–µ–º—ñ–≤ - –º–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞",
                "üì± –ö–æ–ª–∏ –º–∞–≤ –ª—è–≥—Ç–∏ —Å–ø–∞—Ç–∏ 2 –≥–æ–¥–∏–Ω–∏ —Ç–æ–º—É:",
                "‚≠ê –ù—ñ—á–Ω–∏–π Telegram —Å–µ—Ä—Ñ—ñ–Ω–≥ –≤ –¥—ñ—ó",
                "üòÖ –ó–∞–≤—Ç—Ä–∞ —Ä–∞–Ω–æ –≤—Å—Ç–∞–≤–∞—Ç–∏, –∞–ª–µ –º–µ–º—á–∏–∫–∏ –≤–∞–∂–ª–∏–≤—ñ—à–µ",
                "üåÉ –ö–æ–ª–∏ –≤—Å—ñ —Å–ø–ª—è—Ç—å, –∞ —Ç–∏ –¥–∏–≤–∏—à—Å—è –º–µ–º–∏:"
            ]
        }
        
        # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Ö–µ—à—Ç–µ–≥–∏ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é —Ä–æ—Ç–∞—Ü—ñ—î—é
        self.trending_hashtags = [
            "#–º–µ–º—á–∏–∫", "#–≥—É–º–æ—Ä", "#—Ä–µ–ª–µ–π—Ç–∞–±–ª", "#–Ω–∞—Å—Ç—Ä—ñ–π", "#–∂–∏—Ç—Ç—è", 
            "#—Ä–æ–±–æ—Ç–∞", "#–∞–π—Ç—ñ", "#–ø–æ–Ω–µ–¥—ñ–ª–æ–∫", "#–∫–∞–≤–∞", "#—É–∫—Ä–∞—ó–Ω–∞", 
            "#–±–æ–±—ñ–∫", "#—Å–º—ñ—à–Ω–æ", "#–º–µ–º–∞—Å", "#–æ—Ñ—ñ—Ålife", "#—Å—Ç—É–¥–µ–Ω—Çlife", 
            "#–¥–æ—Ä–æ—Å–ª–µlife", "#–∫–∏—ó–≤", "#–ª—å–≤—ñ–≤", "#–ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç", "#—Ñ—Ä—ñ–ª–∞–Ω—Å",
            "#–≤—ñ–¥–¥–∞–ª–µ–Ω–∞—Ä–æ–±–æ—Ç–∞", "#–¥–µ–¥–ª–∞–π–Ω", "#–º—ñ—Ç–∏–Ω–≥", "#–≤–∏—Ö—ñ–¥–Ω—ñ"
        ]
        
    def create_main_menu(self) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞"""
        keyboard = [
            [
                InlineKeyboardButton("üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="analytics"),
                InlineKeyboardButton("üß™ –¢–µ—Å—Ç –ø–æ—Å—Ç", callback_data="test_post")
            ],
            [
                InlineKeyboardButton("üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º", callback_data="random_meme"),
                InlineKeyboardButton("üìÖ –†–æ–∑–∫–ª–∞–¥", callback_data="schedule")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è", callback_data="management"),
                InlineKeyboardButton("üìà –°—Ç–∞—Ç—É—Å API", callback_data="api_status")
            ],
            [
                InlineKeyboardButton("ü§ñ AI –°—Ç–∞—Ç—É—Å", callback_data="ai_status"),
                InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    def create_management_menu(self) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ—Ç–æ–º"""
        status_text = "üü¢ –ó—É–ø–∏–Ω–∏—Ç–∏" if self.scheduler_running else "üî¥ –ó–∞–ø—É—Å—Ç–∏—Ç–∏"
        callback_data = "stop_scheduler" if self.scheduler_running else "start_scheduler"
        
        keyboard = [
            [
                InlineKeyboardButton(f"{status_text} —Ä–æ–∑–∫–ª–∞–¥", callback_data=callback_data),
                InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏", callback_data="restart_scheduler")
            ],
            [
                InlineKeyboardButton("üöÄ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ó–ê–†–ê–ó", callback_data="post_now"),
                InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="clear_stats")
            ],
            [
                InlineKeyboardButton("üîß –¢–µ—Å—Ç API", callback_data="test_apis"),
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    def test_meme_apis(self) -> Dict[str, bool]:
        """–¢–µ—Å—Ç—É—î –≤—Å—ñ API –¥–∂–µ—Ä–µ–ª–∞ –º–µ–º—ñ–≤"""
        api_status = {}
        
        for category, sources in self.meme_sources.items():
            for name, url in sources.items():
                try:
                    logger.info(f"–¢–µ—Å—Ç—É—é API: {name}")
                    
                    headers = {'User-Agent': 'BobikBot/2.0 (Ukrainian Meme Bot)'}
                    response = requests.get(url, headers=headers, timeout=10)
                    
                    api_status[f"{category}_{name}"] = response.status_code == 200
                    
                    if response.status_code == 200:
                        logger.info(f"‚úÖ {name} –ø—Ä–∞—Ü—é—î")
                    else:
                        logger.warning(f"‚ö†Ô∏è {name} –ø–æ–≤–µ—Ä–Ω—É–≤ –∫–æ–¥ {response.status_code}")
                        
                except Exception as e:
                    api_status[f"{category}_{name}"] = False
                    logger.error(f"‚ùå {name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
                    
        return api_status

    def get_meme_with_fallback(self) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º—É—î –º–µ–º –∑ —Å–∏—Å—Ç–µ–º–æ—é fallback —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó"""
        
        # –ü—Ä–æ–±—É—î–º–æ –ø–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É: primary -> tech -> secondary -> backup
        source_priority = ['primary', 'tech_specific', 'secondary', 'backup']
        
        for category in source_priority:
            sources = self.meme_sources.get(category, {})
            
            for source_name, api_url in sources.items():
                try:
                    logger.info(f"–°–ø—Ä–æ–±—É—é {source_name} –∑ {category}")
                    
                    meme = self.fetch_meme_from_api(api_url, source_name)
                    
                    if meme and self.is_quality_meme_ukraine(meme):
                        # –õ–æ–∫–∞–ª—ñ–∑—É—î–º–æ –º–µ–º —è–∫—â–æ —î AI
                        if self.openai_client:
                            meme = self.localize_meme_with_ai(meme)
                            self.stats['localized_posts'] += 1
                        
                        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∂–µ—Ä–µ–ª
                        if source_name not in self.stats['content_sources']:
                            self.stats['content_sources'][source_name] = 0
                        self.stats['content_sources'][source_name] += 1
                        
                        logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —è–∫—ñ—Å–Ω–∏–π –º–µ–º –∑ {source_name}")
                        return meme
                        
                except Exception as e:
                    # –ó–∞–ø–∏—Å—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ñ–¥–º–æ–≤
                    if source_name not in self.stats['api_failures']:
                        self.stats['api_failures'][source_name] = 0
                    self.stats['api_failures'][source_name] += 1
                    
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ {source_name}: {e}")
                    continue
        
        # –Ø–∫—â–æ –≤—Å—ñ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback
        logger.warning("üÜò –í—Å—ñ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é fallback")
        return self.get_fallback_meme()

    def fetch_meme_from_api(self, api_url: str, source_name: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º—É—î –º–µ–º –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ API"""
        
        headers = {'User-Agent': 'BobikBot/2.0 (Ukrainian Meme Bot)'}
        response = requests.get(api_url, headers=headers, timeout=15)
        
        if response.status_code != 200:
            raise Exception(f"HTTP {response.status_code}")
            
        data = response.json()
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ API
        if 'reddit.com' in api_url:
            return self.parse_reddit_response(data, source_name)
        elif 'meme-api' in api_url:
            return self.parse_meme_api_response(data, source_name)  
        elif 'imgflip' in api_url:
            return self.parse_imgflip_response(data, source_name)
        else:
            return self.parse_generic_response(data, source_name)

    def parse_reddit_response(self, data: Dict, source: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å Reddit API"""
        
        posts = data.get('data', {}).get('children', [])
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–∞–π—è–∫—ñ—Å–Ω—ñ—à—ñ –ø–æ—Å—Ç–∏
        quality_posts = []
        for post in posts:
            post_data = post.get('data', {})
            
            if self.is_valid_reddit_post(post_data):
                quality_posts.append({
                    'url': post_data.get('url'),
                    'title': post_data.get('title', ''),
                    'score': post_data.get('score', 0),
                    'subreddit': post_data.get('subreddit', ''),
                    'source': source,
                    'created_utc': post_data.get('created_utc', 0)
                })
        
        if quality_posts:
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—é —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π
            quality_posts.sort(key=lambda x: x['score'], reverse=True)
            return quality_posts[0]
            
        return None

    def parse_meme_api_response(self, data: Dict, source: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å meme-api"""
        
        if 'url' in data and 'title' in data:
            return {
                'url': data.get('url'),
                'title': data.get('title', '–ú–µ–º'),
                'score': data.get('ups', 100),  # –î–µ—Ñ–æ–ª—Ç–Ω–∏–π score
                'subreddit': data.get('subreddit', 'memes'),
                'source': source,
                'created_utc': int(time.time())
            }
        return None

    def parse_imgflip_response(self, data: Dict, source: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å ImgFlip API"""
        
        memes = data.get('data', {}).get('memes', [])
        if memes:
            meme = random.choice(memes[:20])  # –¢–æ–ø 20 –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –º–µ–º—ñ–≤
            return {
                'url': meme.get('url'),
                'title': meme.get('name', 'ImgFlip –ú–µ–º'),
                'score': 500,  # –°–µ—Ä–µ–¥–Ω—ñ–π score –¥–ª—è imgflip
                'subreddit': 'imgflip',
                'source': source,
                'created_utc': int(time.time())
            }
        return None

    def parse_generic_response(self, data: Dict, source: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç—å –∑–∞–≥–∞–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        
        # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è –≤ —Ä—ñ–∑–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç–∞—Ö
        url = data.get('url') or data.get('image') or data.get('link')
        title = data.get('title') or data.get('caption') or data.get('text') or '–ú–µ–º'
        
        if url:
            return {
                'url': url,
                'title': title,
                'score': data.get('score', data.get('upvotes', 100)),
                'subreddit': data.get('subreddit', 'generic'),
                'source': source,
                'created_utc': int(time.time())
            }
        return None

    def is_valid_reddit_post(self, post_data: Dict) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å Reddit –ø–æ—Å—Ç–∞"""
        
        url = post_data.get('url', '')
        title = post_data.get('title', '').lower()
        score = post_data.get('score', 0)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if not any(ext in url.lower() for ext in ['.jpg', '.jpeg', '.png', '.gif', 'i.redd.it', 'i.imgur.com']):
            return False
        
        # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π score (–∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π)
        min_score = 100 if datetime.now().hour in [7, 8, 9, 12, 13, 18, 19, 20] else 50
        if score < min_score:
            return False
        
        # –§—ñ–ª—å—Ç—Ä –Ω–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        blacklist = ['nsfw', 'porn', 'sex', 'nude', 'politics', 'trump', 'biden', 'election']
        if any(word in title for word in blacklist):
            return False
        
        return True

    def is_quality_meme_ukraine(self, meme_data: Dict) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —è–∫—ñ—Å—Ç—å –º–µ–º—É –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó"""
        
        if not meme_data:
            return False
            
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø–æ —Ö–µ—à—É
        meme_hash = self.generate_meme_hash(meme_data)
        if meme_hash in self.stats['posted_hashes']:
            logger.info(f"‚ùå –î—É–±–ª—ñ–∫–∞—Ç –∑–Ω–∞–π–¥–µ–Ω–æ: {meme_data.get('title', '')}")
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—ñ –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏
        if not self.is_relevant_for_ukraine(meme_data):
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        url = meme_data.get('url', '')
        if not url or not any(ext in url.lower() for ext in ['.jpg', '.jpeg', '.png', '.gif', 'i.redd.it', 'i.imgur.com']):
            return False
        
        # –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        self.stats['posted_hashes'].add(meme_hash)
        
        # –û—á–∏—â—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —è–∫—â–æ –∑–∞–±–∞–≥–∞—Ç–æ (–∑–∞–ª–∏—à–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 1000)
        if len(self.stats['posted_hashes']) > 1000:
            self.stats['posted_hashes'] = set(list(self.stats['posted_hashes'])[-500:])
        
        return True

    def generate_meme_hash(self, meme_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —Ö–µ—à –¥–ª—è –º–µ–º—É"""
        content = f"{meme_data.get('title', '')}{meme_data.get('url', '')}"
        return hashlib.md5(content.encode('utf-8')).hexdigest()

    def is_relevant_for_ukraine(self, meme_data: Dict) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—Å—Ç—å –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó"""
        
        title = meme_data.get('title', '').lower()
        
        # Blacklist –¥–ª—è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö —Ç–µ–º
        ukraine_blacklist = [
            'thanksgiving', 'fourth of july', '4th of july', 'super bowl',
            'halloween costumes', 'american football', 'nfl', 'mlb',
            'dollar bills', 'american school', 'american college'
        ]
        
        for term in ukraine_blacklist:
            if term in title:
                logger.info(f"‚ùå –ù–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏: {term} in {title}")
                return False
        
        # Whitelist —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏—Ö —Ç–µ–º
        universal_topics = [
            'work', 'job', 'monday', 'coffee', 'weekend', 'sleep', 'food',
            'internet', 'phone', 'computer', 'programming', 'code', 'bug',
            'meeting', 'boss', 'salary', 'home', 'family', 'friends',
            'netflix', 'youtube', 'instagram', 'tiktok', 'meme', 'funny'
        ]
        
        for topic in universal_topics:
            if topic in title:
                return True
        
        # –Ø–∫—â–æ –≤–∏—Å–æ–∫–∏–π score - –π–º–æ–≤—ñ—Ä–Ω–æ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π
        score = meme_data.get('score', 0)
        return score > 1000

    def localize_meme_with_ai(self, meme_data: Dict) -> Dict:
        """–õ–æ–∫–∞–ª—ñ–∑—É—î –º–µ–º –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ChatGPT"""
        
        if not self.openai_client:
            return meme_data
            
        original_title = meme_data.get('title', '')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è
        if self.is_already_ukrainian(original_title):
            return meme_data
            
        try:
            prompt = f"""
            –ê–¥–∞–ø—Ç—É–π —Ü—é –Ω–∞–∑–≤—É –º–µ–º—É –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó IT –∞—É–¥–∏—Ç–æ—Ä—ñ—ó 16-35 —Ä–æ–∫—ñ–≤:

            –û—Ä–∏–≥—ñ–Ω–∞–ª: "{original_title}"

            –ü—Ä–∞–≤–∏–ª–∞ –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó:
            - –ü–µ—Ä–µ–∫–ª–∞–¥–∏ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            - –ó–∞–º—ñ–Ω–∏ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª—ñ –∞–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∞–Ω–∞–ª–æ–≥–∏
            - –ó–±–µ—Ä—ñ–≥–∞–π –≥—É–º–æ—Ä —Ç–∞ —Å—É—Ç—å
            - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å—É—á–∞—Å–Ω–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–ª–µ–Ω–≥
            - –ú–∞–∫—Å–∏–º—É–º 120 —Å–∏–º–≤–æ–ª—ñ–≤
            - –ù–ï –¥–æ–¥–∞–≤–∞–π –µ–º–æ–¥–∑—ñ (–≤–æ–Ω–∏ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –æ–∫—Ä–µ–º–æ)

            –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –Ω–∞–∑–≤–∞:
            """
            
            response = self.openai_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=150,
                temperature=0.7
            )
            
            localized_title = response.choices[0].message.content.strip()
            
            # –û—á–∏—â—É—î–º–æ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–∞ —Ñ—Ä–∞–∑
            localized_title = localized_title.replace('"', '').replace('–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –Ω–∞–∑–≤–∞:', '').strip()
            
            if localized_title and len(localized_title) > 10:
                meme_data['title'] = localized_title
                meme_data['localized'] = True
                logger.info(f"üá∫üá¶ –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {original_title[:50]}... ‚Üí {localized_title[:50]}...")
            
        except Exception as e:
            logger.error(f"üî¥ –ü–æ–º–∏–ª–∫–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó AI: {e}")
            
        return meme_data

    def is_already_ukrainian(self, text: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ç–µ–∫—Å—Ç –≤–∂–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"""
        
        ukrainian_chars = '–∞–±–≤–≥“ë–¥–µ—î–∂–∑–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è'
        text_lower = text.lower()
        
        ukrainian_char_count = sum(1 for char in text_lower if char in ukrainian_chars)
        total_chars = len([char for char in text_lower if char.isalpha()])
        
        if total_chars == 0:
            return False
            
        ukrainian_percentage = ukrainian_char_count / total_chars
        return ukrainian_percentage > 0.3  # –ë—ñ–ª—å—à–µ 30% —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤

    def get_time_category(self, hour: int) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —á–∞—Å—É –¥–ª—è –ø—ñ–¥–±–æ—Ä—É –ø—ñ–¥–ø–∏—Å—ñ–≤ (—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —á–∞—Å–æ–≤–∞ –∑–æ–Ω–∞)"""
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ UTC –≤ –∫–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å (+2)
        kyiv_hour = (hour + 2) % 24
        
        if 5 <= kyiv_hour < 8:
            return 'early_morning'
        elif 8 <= kyiv_hour < 11:
            return 'morning'
        elif 11 <= kyiv_hour < 14:
            return 'work_hours'
        elif 14 <= kyiv_hour < 16:
            return 'lunch'
        elif 16 <= kyiv_hour < 18:
            return 'afternoon'
        elif 18 <= kyiv_hour < 21:
            return 'evening'
        elif 21 <= kyiv_hour < 24:
            return 'late_evening'
        else:
            return 'night'

    def generate_smart_caption(self, meme_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä—É—î —Ä–æ–∑—É–º–Ω—ñ –ø—ñ–¥–ø–∏—Å–∏ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        
        current_hour = datetime.now().hour
        time_category = self.get_time_category(current_hour)
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –ø—ñ–¥–ø–∏—Å –∑–∞ —á–∞—Å–æ–º –¥–Ω—è
        time_caption = random.choice(self.time_based_captions[time_category])
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–∞–∑–≤—É –º–µ–º—É
        title = meme_data.get('title', '')
        source = meme_data.get('source', 'unknown')
        score = meme_data.get('score', 0)
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ –ø—Ä–æ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é
        localization_note = ""
        if meme_data.get('localized'):
            localization_note = " ü§ñ"
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ö–µ—à—Ç–µ–≥–∏ (2-3 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö)
        hashtags = random.sample(self.trending_hashtags, 3)
        hashtag_str = ' '.join(hashtags)
        
        # –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥–ø–∏—Å
        if title:
            caption = f"{time_caption}\n\nüí≠ {title}{localization_note}\n\n"
        else:
            caption = f"{time_caption}\n\n"
        
        # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        caption += f"üìä –ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å: {score}\n"
        caption += f"üîó –î–∂–µ—Ä–µ–ª–æ: {source}\n\n"
        caption += hashtag_str
        
        return caption

    async def post_meme_to_channel_advanced(self) -> bool:
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è –∑ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é"""
        
        try:
            meme = self.get_meme_with_fallback()
            if not meme:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –º–µ–º—É")
                self.stats['failed_posts'] += 1
                return False
            
            caption = self.generate_smart_caption(meme)
            bot = Bot(token=self.bot_token)
            
            # –ü—É–±–ª—ñ–∫—É—î–º–æ –º–µ–º
            result = await bot.send_photo(
                chat_id=self.channel_id,
                photo=meme['url'],
                caption=caption
            )
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            current_time = datetime.now()
            self.stats['posts_today'] += 1
            self.stats['total_posts'] += 1
            self.stats['successful_posts'] += 1
            self.stats['last_post_time'] = current_time
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–¥–∏–Ω–∞—Ö
            hour_key = current_time.strftime('%H')
            if hour_key not in self.stats['daily_stats']:
                self.stats['daily_stats'][hour_key] = 0
            self.stats['daily_stats'][hour_key] += 1
            
            # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if hour_key not in self.stats['hourly_posts']:
                self.stats['hourly_posts'][hour_key] = []
            self.stats['hourly_posts'][hour_key].append({
                'time': current_time.isoformat(),
                'meme_title': meme.get('title', ''),
                'source': meme.get('source', ''),
                'localized': meme.get('localized', False),
                'message_id': result.message_id
            })
            
            logger.info(f"‚úÖ –ú–µ–º –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ! ID: {result.message_id}, –ß–∞—Å: {current_time.strftime('%H:%M')}, –î–∂–µ—Ä–µ–ª–æ: {meme.get('source', 'Unknown')}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
            self.stats['failed_posts'] += 1
            return False

    def get_fallback_meme(self) -> Dict:
        """–†–µ–∑–µ—Ä–≤–Ω—ñ –º–µ–º–∏ –∫–æ–ª–∏ –≤—Å—ñ API –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å"""
        
        fallback_memes = [
            {
                'url': 'https://i.imgflip.com/1bij.jpg',
                'title': '–ö–æ–ª–∏ –≤—Å—ñ API –≤–ø–∞–ª–∏, –∞–ª–µ –ë–æ–±—ñ–∫ –Ω–µ –∑–¥–∞—î—Ç—å—Å—è! üí™',
                'score': 9999,
                'source': 'fallback',
                'subreddit': 'bobik_emergency'
            },
            {
                'url': 'https://i.imgflip.com/30b1gx.jpg', 
                'title': '–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ—Ç–∏ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ API',
                'score': 8888,
                'source': 'fallback',
                'subreddit': 'bobik_emergency'
            },
            {
                'url': 'https://i.imgflip.com/1otk96.jpg',
                'title': '–ö–æ–ª–∏ —î —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –ø–ª–∞–Ω –Ω–∞ –≤—Å—ñ –≤–∏–ø–∞–¥–∫–∏ –∂–∏—Ç—Ç—è',
                'score': 7777,
                'source': 'fallback',
                'subreddit': 'bobik_emergency'
            }
        ]
        
        return random.choice(fallback_memes)

    def should_post_now(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ç—Ä–µ–±–∞ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞—Ä–∞–∑"""
        current_time = datetime.now().strftime('%H:%M')
        return current_time in self.posting_schedule

    async def scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º"""
        logger.info("üïê –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–∏–π!")
        
        while self.scheduler_running:
            try:
                if self.should_post_now():
                    kyiv_time = (datetime.now().hour + 2) % 24
                    logger.info(f"‚è∞ –ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {datetime.now().strftime('%H:%M')} UTC (–ö–∏—ó–≤: {kyiv_time:02d}:{datetime.now().minute:02d})")
                    
                    success = await self.post_meme_to_channel_advanced()
                    
                    if success:
                        logger.info("‚úÖ –ú–µ–º —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º")
                    else:
                        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º")
                    
                    # –ß–µ–∫–∞—î–º–æ 70 —Å–µ–∫—É–Ω–¥ —â–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –≤ —Ç—É –∂ —Ö–≤–∏–ª–∏–Ω—É
                    await asyncio.sleep(70)
                else:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
                    await asyncio.sleep(30)
                    
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫—É: {e}")
                await asyncio.sleep(60)

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        if not self.scheduler_running:
            self.scheduler_running = True
            
            def run_scheduler():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.scheduler_loop())
            
            scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
            scheduler_thread.start()
            logger.info("üìÖ –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!")

    def stop_scheduler(self):
        """–ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        self.scheduler_running = False
        logger.info("‚èπÔ∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ!")

    async def button_callback(self, update, context):
        """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∑ –Ω–æ–≤–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "main_menu":
            await query.edit_message_text(
                "üêï **–ü–æ–∫—Ä–∞—â–µ–Ω–µ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ë–æ–±—ñ–∫–∞**\n\nü§ñ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞\nüì° –ú–Ω–æ–∂–∏–Ω–Ω—ñ API –¥–∂–µ—Ä–µ–ª–∞\nüá∫üá¶ –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=self.create_main_menu(),
                parse_mode='Markdown'
            )
            
        elif data == "api_status":
            await query.edit_message_text("üîç –¢–µ—Å—Ç—É—é –≤—Å—ñ API –¥–∂–µ—Ä–µ–ª–∞...")
            api_results = self.test_meme_apis()
            
            status_text = "üì° **–°—Ç–∞—Ç—É—Å API –¥–∂–µ—Ä–µ–ª:**\n\n"
            
            working_apis = 0
            total_apis = len(api_results)
            
            for api_name, is_working in api_results.items():
                status_icon = "‚úÖ" if is_working else "‚ùå"
                category = api_name.split('_')[0]
                name = '_'.join(api_name.split('_')[1:])
                status_text += f"{status_icon} **{category}**: {name}\n"
                if is_working:
                    working_apis += 1
            
            status_text += f"\nüìä **–ü—ñ–¥—Å—É–º–æ–∫:** {working_apis}/{total_apis} –ø—Ä–∞—Ü—é—é—Ç—å\n"
            
            if working_apis == 0:
                status_text += "üÜò **–ö—Ä–∏—Ç–∏—á–Ω–æ**: –í—Å—ñ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ!"
            elif working_apis < total_apis // 2:
                status_text += "‚ö†Ô∏è **–£–≤–∞–≥–∞**: –ë–∞–≥–∞—Ç–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ"
            else:
                status_text += "‚úÖ **–î–æ–±—Ä–µ**: –î–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–æ–±–æ—á–∏—Ö API"
            
            await query.edit_message_text(
                status_text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="api_status"),
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
                ]]),
                parse_mode='Markdown'
            )
            
        elif data == "ai_status":
            ai_text = "ü§ñ **–°—Ç–∞—Ç—É—Å AI —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó:**\n\n"
            
            if OPENAI_AVAILABLE and self.openai_client:
                ai_text += "‚úÖ **OpenAI**: –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ\n"
                ai_text += f"üìä **–õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø–æ—Å—Ç—ñ–≤**: {self.stats['localized_posts']}\n"
                ai_text += "üá∫üá¶ **–§—É–Ω–∫—Ü—ñ—ó**: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–º—ñ–≤\n"
                ai_text += "üéØ **–Ø–∫—ñ—Å—Ç—å**: –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—Å—Ç—å –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏\n\n"
                ai_text += "üí° **AI –¥–æ–ø–æ–º–∞–≥–∞—î:**\n"
                ai_text += "‚Ä¢ –ü–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –º–µ–º–∏\n"
                ai_text += "‚Ä¢ –ê–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n"
                ai_text += "‚Ä¢ –ü–æ–∫—Ä–∞—â—É–≤–∞—Ç–∏ –∑—Ä–æ–∑—É–º—ñ–ª—ñ—Å—Ç—å –¥–ª—è —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤"
            elif OPENAI_AVAILABLE:
                ai_text += "‚ö†Ô∏è **OpenAI**: –î–æ—Å—Ç—É–ø–Ω–æ, –∞–ª–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ\n"
                ai_text += "üîë **–ü–æ—Ç—Ä—ñ–±–Ω–æ**: –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ OPENAI_API_KEY\n"
                ai_text += "üìù **–ö–æ–º–∞–Ω–¥–∞**: `export OPENAI_API_KEY=your_key`"
            else:
                ai_text += "‚ùå **OpenAI**: –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n"
                ai_text += "üì¶ **–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è**: `pip install openai`\n"
                ai_text += "‚ö° **–°—Ç–∞—Ç—É—Å**: –ü—Ä–∞—Ü—é—î–º–æ –±–µ–∑ AI (–±–∞–∑–æ–≤–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è)"
            
            await query.edit_message_text(
                ai_text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]),
                parse_mode='Markdown'
            )
            
        elif data == "test_apis":
            await query.edit_message_text("üß™ –¢–µ—Å—Ç—É—é –≤—Å—ñ API —Ç–∞ –ø—É–±–ª—ñ–∫—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏...")
            
            api_results = self.test_meme_apis()
            working_count = sum(api_results.values())
            
            test_text = f"üî¨ **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API:**\n\n"
            test_text += f"üìä –ü—Ä–∞—Ü—é—é—á–∏—Ö API: {working_count}/{len(api_results)}\n\n"
            
            # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–º
            meme = self.get_meme_with_fallback()
            if meme:
                test_text += f"‚úÖ **–ú–µ–º –æ—Ç—Ä–∏–º–∞–Ω–æ**: {meme.get('source', 'unknown')}\n"
                test_text += f"üìù **–ù–∞–∑–≤–∞**: {meme.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')[:50]}...\n"
                test_text += f"üéØ **–õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ**: {'–¢–∞–∫' if meme.get('localized') else '–ù—ñ'}\n\n"
                test_text += "üöÄ –ì–æ—Ç–æ–≤–∏–π –¥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó!"
            else:
                test_text += "‚ùå **–ü–æ–º–∏–ª–∫–∞**: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–º –∑ –∂–æ–¥–Ω–æ–≥–æ API"
            
            await query.edit_message_text(
                test_text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="management")]]),
                parse_mode='Markdown'
            )
            
        # ... (—Ä–µ—à—Ç–∞ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–Ω–æ–ø–æ–∫ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É, –∞–ª–µ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º–∏)
        
        elif data == "test_post":
            await query.edit_message_text("üß™ –ü—É–±–ª—ñ–∫—É—é —Ç–µ—Å—Ç–æ–≤–∏–π –º–µ–º –∑ AI –æ–±—Ä–æ–±–∫–æ—é...")
            success = await self.post_meme_to_channel_advanced()
            
            if success:
                text = "‚úÖ **–¢–µ—Å—Ç–æ–≤–∏–π –º–µ–º —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!**\n\n"
                text += f"ü§ñ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è: {'–ê–∫—Ç–∏–≤–Ω–∞' if self.openai_client else '–í–∏–º–∫–Ω–µ–Ω–∞'}\n"
                text += f"üìä –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø–æ—Å—Ç—ñ–≤: {self.stats['localized_posts']}\n\n"
                text += "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–∞–Ω–∞–ª @BobikFun"
            else:
                text = "‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó**\n\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ —Ç–∞ —Å—Ç–∞—Ç—É—Å API"
                
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]),
                parse_mode='Markdown'
            )

    def create_permanent_menu(self) -> ReplyKeyboardMarkup:
        """–°—Ç–≤–æ—Ä—é—î –ø–æ—Å—Ç—ñ–π–Ω–µ –º–µ–Ω—é –≤–Ω–∏–∑—É –µ–∫—Ä–∞–Ω—É"""
        keyboard = [
            ["üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", "üß™ –¢–µ—Å—Ç –ø–æ—Å—Ç"],
            ["üé≤ –ú–µ–º", "üìÖ –†–æ–∑–∫–ª–∞–¥"], 
            ["‚öôÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è", "üì° API –°—Ç–∞—Ç—É—Å"],
            ["ü§ñ AI –°—Ç–∞—Ç—É—Å", "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞"]
        ]
        return ReplyKeyboardMarkup(
            keyboard, 
            resize_keyboard=True,
            one_time_keyboard=False,
            selective=False,
            input_field_placeholder="–û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é üëá"
        )

    def get_analytics(self) -> str:
        """–ì–µ–Ω–µ—Ä—É—î —Ä–æ–∑—à–∏—Ä–µ–Ω—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –∑ AI –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        
        success_rate = 0
        if self.stats['successful_posts'] + self.stats['failed_posts'] > 0:
            success_rate = (self.stats['successful_posts'] / 
                          (self.stats['successful_posts'] + self.stats['failed_posts']) * 100)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∂–µ—Ä–µ–ª
        top_sources = sorted(
            self.stats['content_sources'].items(), 
            key=lambda x: x[1], 
            reverse=True
        )[:3]
        
        analytics = f"""
üìä **–†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ë–æ–±—ñ–∫–∞ 2.0:**

üìà **–û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ü–æ—Å—Ç—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ: {self.stats['posts_today']}/11
‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ—Å—Ç—ñ–≤: {self.stats['total_posts']}
‚Ä¢ –£—Å–ø—ñ—à–Ω–∏—Ö: {self.stats['successful_posts']}
‚Ä¢ –ù–µ–≤–¥–∞–ª–∏—Ö: {self.stats['failed_posts']}
‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%

ü§ñ **AI –º–µ—Ç—Ä–∏–∫–∏:**
‚Ä¢ –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø–æ—Å—Ç—ñ–≤: {self.stats['localized_posts']}
‚Ä¢ AI —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' if self.openai_client else '‚ùå –í–∏–º–∫–Ω–µ–Ω–∏–π'}

üì° **–¢–æ–ø –¥–∂–µ—Ä–µ–ª–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É:**"""
        
        for source, count in top_sources:
            analytics += f"\n‚Ä¢ {source}: {count} –ø–æ—Å—Ç—ñ–≤"
        
        analytics += f"""

üåç **–£–∫—Ä–∞—ó–Ω—ñ–∑–∞—Ü—ñ—è:**
‚Ä¢ –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å: UTC+2 (–ö–∏—ó–≤)
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: IT –∞—É–¥–∏—Ç–æ—Ä—ñ—è 16-35 —Ä–æ–∫—ñ–≤
‚Ä¢ –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è: {'AI + —Ä—É—á–Ω–∞' if self.openai_client else '–¢—ñ–ª—å–∫–∏ —Ä—É—á–Ω–∞'}
"""
        
        return analytics

    # ... (–¥–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–æ–¥–∏ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º–∏)

    async def start_command(self, update, context):
        permanent_menu = self.create_permanent_menu()
        await update.message.reply_text(
            "üêï **–ü—Ä–∏–≤—ñ—Ç! –Ø –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –ë–æ–±—ñ–∫ 2.0!**\n\n"
            "üöÄ **–ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:**\n"
            "‚Ä¢ ü§ñ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–º—ñ–≤ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤\n"
            "‚Ä¢ üì° –ú–Ω–æ–∂–∏–Ω–Ω—ñ API –∑ –≤—ñ–¥–º–æ–≤–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—é\n"
            "‚Ä¢ üá∫üá¶ –ê–¥–∞–ø—Ç–æ–≤–∞–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ (UTC+2)\n"
            "‚Ä¢ üìä –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –¥–∂–µ—Ä–µ–ª\n"
            "‚Ä¢ üéØ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—ñ\n\n"
            "üì± **–ü–æ—Å—Ç—ñ–π–Ω–µ –º–µ–Ω—é –∑'—è–≤–∏–ª–æ—Å—è –≤–Ω–∏–∑—É –µ–∫—Ä–∞–Ω—É!**\n"
            f"ü§ñ **AI —Å—Ç–∞—Ç—É—Å**: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' if self.openai_client else '‚ö†Ô∏è –ë–∞–∑–æ–≤–∏–π —Ä–µ–∂–∏–º'}\n\n"
            "üîó **–ö–∞–Ω–∞–ª:** @BobikFun",
            reply_markup=permanent_menu,
            parse_mode='Markdown'
        )

    # ... (—Ä–µ—à—Ç–∞ –º–µ—Ç–æ–¥—ñ–≤ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º–∏"""
    bot = AdvancedBobikBot()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(bot.bot_token).build()
    
    # –î–æ–¥–∞—î–º–æ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –æ–±—Ä–æ–±–Ω–∏–∫–∏ (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É)
    application.add_handler(CommandHandler("start", bot.start_command))
    # ... (–¥–æ–¥–∞—Ç–∏ –≤—Å—ñ —ñ–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏)
    
    # –ó–ê–ü–£–°–ö–ê–Ñ–ú–û –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–ô –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö
    bot.start_scheduler()
    
    logger.info("üöÄ –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –ë–æ–±—ñ–∫ 2.0 –∑ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é –∑–∞–ø—É—â–µ–Ω–∏–π!")
    logger.info(f"ü§ñ AI —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' if bot.openai_client else '‚ö†Ô∏è –ë–∞–∑–æ–≤–∏–π —Ä–µ–∂–∏–º'}")
    logger.info(f"üìÖ –ë—É–¥–µ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ {len(bot.posting_schedule)} –º–µ–º—ñ–≤ –Ω–∞ –¥–µ–Ω—å")
    logger.info("üá∫üá¶ –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó!")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
